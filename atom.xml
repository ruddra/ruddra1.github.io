<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruddra's Blog]]></title>
  <link href="http://www.ruddra.com/atom.xml" rel="self"/>
  <link href="http://www.ruddra.com/"/>
  <updated>2014-08-07T01:00:45+06:00</updated>
  <id>http://www.ruddra.com/</id>
  <author>
    <name><![CDATA[Arnab Kumar Shil]]></name>
    <email><![CDATA[ruddra90@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working With Formsets]]></title>
    <link href="http://www.ruddra.com/blog/2014/08/06/working-with-formsets/"/>
    <updated>2014-08-06T21:44:37+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/08/06/working-with-formsets</id>
    <content type="html"><![CDATA[<p>As <a href="https://docs.djangoproject.com/en/dev/topics/forms/formsets/">documentation</a> says: <blockquote> A formset is a layer of abstraction to work with multiple forms on the same page. It can be best compared to a data grid</blockquote>.</p>

<p>So here I am going to show a very simple django formset implementation example.<!--more--></p>

<p>Here we are going to use the following model, form, template, view:</p>

<h3>Model:</h3>




<figure class='code'><figcaption><span>model </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Product(models.Model):
</span><span class='line'>    name = models.CharField(max_length=50)
</span><span class='line'>    quantity = models.IntegerField()
</span><span class='line'>    price = models.IntegerField()
</span><span class='line'>
</span><span class='line'>class Distributor(models.Model):
</span><span class='line'>    name = models.CharField(max_length=100)
</span><span class='line'>    products= models.ManyToManyField(Product)</span></code></pre></td></tr></table></div></figure>


<p>These fairly simple models, where product is related to distributor model by a many-to-many relation.</p>

<h3>Form:</h3>


<p>First we declare productform, then using formset factory helps to create multiple instances of product. Then we add this to distributor form like below:</p>

<figure class='code'><figcaption><span>form </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django import forms
</span><span class='line'>from django.forms.formsets import formset_factory
</span><span class='line'>class ProductForm(forms.Form):
</span><span class='line'>     name = forms.CharField()
</span><span class='line'>     quantity = forms.IntegerField()
</span><span class='line'>     price = forms.IntegerField()
</span><span class='line'>
</span><span class='line'>ProductFormset= formset_factory(ProductForm)
</span><span class='line'>
</span><span class='line'>class DistributorForm(forms.Form):
</span><span class='line'>    name= forms.CharField()
</span><span class='line'>    products= ProductFormset()</span></code></pre></td></tr></table></div></figure>


<p>Now we use this form in template.</p>

<h3>Template:</h3>




<figure class='code'><figcaption><span>template </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;form action="" method="post" class="">
</span><span class='line'>{% csrf_token %}
</span><span class='line'>&lt;h2> Distributors :&lt;/h2>
</span><span class='line'>{% for field in form %}
</span><span class='line'>  {{ field.errors }}
</span><span class='line'>  {{ field.label_tag }} : {{ field }}
</span><span class='line'>{% endfor %}
</span><span class='line'>{{ form.products.management_form }}
</span><span class='line'>
</span><span class='line'>&lt;h3> Product Instance(s)&lt;/h3>
</span><span class='line'>&lt;table id="table-product">
</span><span class='line'>  &lt;thead>
</span><span class='line'>      &lt;tr>
</span><span class='line'>        &lt;th>name&lt;/th>
</span><span class='line'>        &lt;th>quantity&lt;/th>       
</span><span class='line'>        &lt;th>price&lt;/th>
</span><span class='line'>      &lt;/tr>
</span><span class='line'>    &lt;/thead>
</span><span class='line'>    &lt;tbody class="product-instances">
</span><span class='line'>      &lt;tr>
</span><span class='line'>        &lt;td>{{ form.product }}&lt;/td>
</span><span class='line'>        &lt;td>{{ form.product }}&lt;/td>     
</span><span class='line'>        &lt;td>{{ form.product }}&lt;/td>
</span><span class='line'>        &lt;td> &lt;input id="input_add" type="button" name="add" value=" Add More " class="tr_clone_add btn data_input"> &lt;/td>
</span><span class='line'>      &lt;/tr>
</span><span class='line'>    &lt;/tbody>
</span><span class='line'>{% endfor %}
</span><span class='line'>&lt;/table>
</span><span class='line'>            &lt;input type="submit" name="submit" class="button" value="Save"/>
</span><span class='line'>&lt;/form>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>        var i = 1;
</span><span class='line'>        $("#input_add").click(function() {
</span><span class='line'>            $("tbody tr:first").clone().find(".data_input").each(function() {
</span><span class='line'>                if ($(this).attr('class')== 'tr_clone_add btn data_input'){
</span><span class='line'>                    $(this).attr({
</span><span class='line'>                        'id': function(_, id) { return "remove_button" },
</span><span class='line'>                        'name': function(_, name) { return "name_remove" +i },
</span><span class='line'>                        'value': 'Remove'
</span><span class='line'>                    }).on("click", function(){
</span><span class='line'>                        var a = $(this).parent();
</span><span class='line'>                        var b= a.parent();
</span><span class='line'>                        i=i-1
</span><span class='line'>                        $('#id_form-TOTAL_FORMS').val(i);
</span><span class='line'>                        b.remove();
</span><span class='line'>
</span><span class='line'>                        $('.product-instances tr').each(function(index, value){
</span><span class='line'>                            $(this).find('.data_input').each(function(){
</span><span class='line'>                                $(this).attr({
</span><span class='line'>                                    'id': function (_, id) {
</span><span class='line'>                                        var idData= id;
</span><span class='line'>                                        var splitV= String(idData).split('-');
</span><span class='line'>                                        var fData= splitV[0];
</span><span class='line'>                                        var tData= splitV[2];
</span><span class='line'>                                        return fData+ "-" +index + "-" + tData
</span><span class='line'>                                    },
</span><span class='line'>                                    'name': function (_, name) {
</span><span class='line'>                                        var nameData= name;
</span><span class='line'>                                        var splitV= String(nameData).split('-');
</span><span class='line'>                                        var fData= splitV[0];
</span><span class='line'>                                        var tData= splitV[2];
</span><span class='line'>                                        return fData+ "-" +index + "-" + tData
</span><span class='line'>                                    }
</span><span class='line'>                                });
</span><span class='line'>                            })
</span><span class='line'>                        })
</span><span class='line'>                    })
</span><span class='line'>                }
</span><span class='line'>                else{
</span><span class='line'>                    $(this).attr({
</span><span class='line'>                        'id': function (_, id) {
</span><span class='line'>                            var idData= id;
</span><span class='line'>                            var splitV= String(idData).split('-');
</span><span class='line'>                            var fData= splitV[0];
</span><span class='line'>                            var tData= splitV[2];
</span><span class='line'>                            return fData+ "-" +i + "-" + tData
</span><span class='line'>                        },
</span><span class='line'>                        'name': function (_, name) {
</span><span class='line'>                            var nameData= name;
</span><span class='line'>                            var splitV= String(nameData).split('-');
</span><span class='line'>                            var fData= splitV[0];
</span><span class='line'>                            var tData= splitV[2];
</span><span class='line'>                            return fData+ "-" +i + "-" + tData
</span><span class='line'>                        }
</span><span class='line'>                    });
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>            }).end().appendTo("tbody");
</span><span class='line'>            $('#id_form-TOTAL_FORMS').val(1+i);
</span><span class='line'>            i++;
</span><span class='line'>
</span><span class='line'>        });
</span><span class='line'>    &lt;/script></span></code></pre></td></tr></table></div></figure>


<p>The html part is fairly simple, like using form in template. Then the JS is being used so that multiple instances of product form can be generated like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- First row of the table -->
</span><span class='line'>
</span><span class='line'>&lt;tr>&lt;td>&lt;input type="text" name="form-0-name" id="id_form-0-name" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-0-quantity" id="id_form-0-quantity" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-0-price" id="id_form-0-price" />&lt;/td>
</span><span class='line'>&lt;td> &lt;input id="input_add" type="button" name="add" value=" Add More " class="tr_clone_add btn data_input"> &lt;/td> &lt;/tr>
</span><span class='line'>
</span><span class='line'>&lt;!-- Second row of the table -->
</span><span class='line'>
</span><span class='line'>&lt;tr>&lt;td>&lt;input type="text" name="form-1-name" id="id_form-1-name" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-1-quantity" id="id_form-1-quantity" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-1-price" id="id_form-1-price" />&lt;/td>
</span><span class='line'>&lt;td> &lt;input id="remove_button" type="button" name="remove_button1" value=" Remove " class="tr_clone_add btn data_input"> &lt;/td> &lt;/tr>
</span><span class='line'>
</span><span class='line'>&lt;!-- more inline formset are going to rendered here --></span></code></pre></td></tr></table></div></figure>




<h3>View:</h3>


<p>Here values from the form are being saved to database.</p>

<figure class='code'><figcaption><span>view </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def post(request):
</span><span class='line'>        form = DistributorForm(request.POST)
</span><span class='line'>        form.product_instances = ProductFormset(request.POST)
</span><span class='line'>        if form.is_valid():
</span><span class='line'>            distributor= Distributor() #model class
</span><span class='line'>            distributor.name= form.cleaned_data('name')
</span><span class='line'>            distributor.save()
</span><span class='line'>            if form.product_instances.cleaned_data is not None:
</span><span class='line'>                for items in form.product_instances.cleaned_data:
</span><span class='line'>                    product = Product() #Product model class
</span><span class='line'>                    product.name= item['name']
</span><span class='line'>                    product.quantity= item['quantity']
</span><span class='line'>                    product.price= item['price']
</span><span class='line'>                    product.save()
</span><span class='line'>                    distributor.products.add(product)
</span><span class='line'>            return redirect('/success')
</span><span class='line'>        return redirect('/failure')</span></code></pre></td></tr></table></div></figure>


<p>Output should look like this:</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/myblog/formset.JPG"></p>

<p><b>Notes to keep in mind:</b></p>

<p>First, need to be careful about things like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="hidden" name="form-TOTAL_FORMS" value="1" id="id_form-TOTAL_FORMS" />
</span><span class='line'>&lt;input type="hidden" name="form-INITIAL_FORMS" value="0" id="id_form-INITIAL_FORMS" />
</span><span class='line'>&lt;input type="hidden" name="form-MAX_NUM_FORMS" id="id_form-MAX_NUM_FORMS" /></span></code></pre></td></tr></table></div></figure>


<p>Here <code>form-TOTAL_FORMS</code> &rsquo;s value should be equal to number of rows in table. The code above must exist in order to formset to work.</p>

<p>Second, in views.py, formset form class needs to be called, else cleaned data within the formset can&rsquo;t be found.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>form.product_instances = ProductFormset(request.POST)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syncdb vs Migration]]></title>
    <link href="http://www.ruddra.com/blog/2014/07/04/syncdb-vs-migration/"/>
    <updated>2014-07-04T12:49:31+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/07/04/syncdb-vs-migration</id>
    <content type="html"><![CDATA[<p>While surfing through stackoverflow, I find a common question among django users that, database not working properly; fields attribute changed, yet not working etc. <!--more-->Clearly because most of them used syncdb after altering fields. Well, lets make some things clear here about django <code>syncdb</code> and <code>migration</code>.</p>

<h2>What is <code>syncdb</code>?</h2>

<p><code>syncdb</code> is a command which is executed in django shell to create tables for first time for apps which are added to <code>INSTALLED_APPS</code> of settings.py. Need to keep in mind about two key words: &lsquo;First Time&rsquo; and &lsquo;Newly Added Apps&rsquo;. Because <code>syncdb</code> only works on models of those apps for first time to create initial tables in database. So once <code>syncdb</code> is executed, not model field altering, because if anyone does that, it will not work. Its clearly mentioned in <a href="https://docs.djangoproject.com/en/1.6/ref/django-admin/#syncdb">documentation</a>:</p>

<blockquote>syncdb will only create tables for models which have not yet been installed. It will never issue ALTER TABLE statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process.

If you have made changes to a model and wish to alter the database tables to match, use the sql command to display the new SQL structure and compare that to your existing table schema to work out the changes.</blockquote>


<p>So what if you need to change model field? No worries, migration is here to save you.</p>

<h2>What is <code>migration</code>?</h2>

<p>Migration is a process to reconstruct database schema according to altered model fields. From Django 1.7(under development) <a href="https://docs.djangoproject.com/en/dev/topics/migrations/">documentation</a>:</p>

<blockquote>Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They’re designed to be mostly automatic, but you’ll need to know when to make migrations, when to run them, and the common problems you might run into.</blockquote>


<p>So, after using <code>syncdb</code>, if you need to alter model fields, then go ahead, and after that you have to migrate database. If you are using django &lt;=1.6, then you can use <a href="http://south.aeracode.org/">South</a>. If django is above 1.6, it has its own <a href="https://docs.djangoproject.com/en/dev/topics/migrations/">migration</a> process.</p>

<p>And of course, if you use <code>South</code> to migrate, you have to use <code>syncdb</code> before executing migration, because if you don&rsquo;t, initial database tables(including auth, auth_group_permission, django_admin_log etc) will not be created.</p>

<h3>PS: <code>syncdb</code> will be depricated from django 1.7, which will reduce the hassle of using syncdb and migration separately.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install CyanogenMod to Xperia]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/27/install-cyanogenmod-to-xperia/"/>
    <updated>2014-06-27T13:35:50+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/27/install-cyanogenmod-to-xperia</id>
    <content type="html"><![CDATA[<p>Today I am going to share how to flash a Sony Xperia device with CyanogenMod. I have tried on my Xperia SP, and its fairly easy I assure you!! ;) <!--more--></p>

<p><b>Step 1:</b> You need to get your bootload unlocked before flashing ROM. Get your key from <a href="http://unlockbootloader.sonymobile.com/instructions">sonymobile</a>. Follow the instructions to get your keys and check wheather your bootloader can be unlocked.</p>

<p><b>Step 2:</b> Use windows 7 or lower. Windows 8 or higher editions have driver signature problem. I don&rsquo;t like hassle so I went for windows 7, but if you insist on using windows 8/8.1 to unlock bootloader, follow <a href="http://www.fotoclubinc.com/blog/how-to-disable-driver-signature-enforcement-to-allow-installation-of-windows-7-printer-drivers-on-windows-8/">this instructions</a>.</p>

<p><b>Step 3:</b> Dowload <a href="http://forum.xda-developers.com/showthread.php?t=2335555">Fasttool</a>. Download fasttool drivers from  <a href="http://forum.xda-developers.com/showthread.php?t=2635830">here</a>. Install them. Now download adb package from <a href="http://developer.android.com/tools/help/adb.html">here</a> (download, unzip, update Google drivers) or <a href="http://forum.xda-developers.com/showthread.php?t=2588979">here</a>( easier to use)</p>

<p><b>Step 4:</b> Open Flashtool, click on BLU icon marked like here:</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/myblog/flashtool.JPG"></p>

<p>Shut down the phone, then while plugging the usb cable, press volume down button( For Xperia SP, or Xperia Z, back button for xperia s etc). You will see another pop up, which will say shut down device. Now plug USB cable and <a href="http://unlockbootloader.sonymobile.com/fastboot-buttons">fastboot button</a> at same time, The device will be loaded as flashmode. Now Flashtool will ask for unlock code, which you will get from <code>Step One</code>. Thus the device will be unlocked.</p>

<p>Alternate option: follow instructions from this  <a href=" http://unlockbootloader.sonymobile.com/instructions">sonymobile</a> where you can unlock the device from command prompt.</p>

<p>PS: If you see logs in Flashtool like: &lsquo;your device can&rsquo;t be unlocked&rsquo;, don&rsquo;t believe it. You just haven&rsquo;t installed the correct drivers yet.
Rooting device is NOT required to flash ROM.</p>

<p><b>Step 5:</b> Hard part is done, now here comes the easy works. Download <a href="https://sites.google.com/site/projectfreexperia/download">CyanogenMod</a>. Download a ROM which is preferred by you(Kitkat, JB, or ICS) also compatible for your device. Download GAPPS(Google app packages) from this <a href="http://forum.xda-developers.com/showthread.php?t=2523640">thread</a>. Put them in SD card root directory.</p>

<p><b>Step 6:</b> This is Copy-pasted from <a href="http://wiki.cyanogenmod.org/w/Install_CM_for_huashan">CyanogenMod website</a>.(For Xperia SP or any device)</p>

<p><ul></p>

<p>  <li> 1. Download CyanogenMod you wish to install. </li></p>

<p>  <li> 2. Extract the boot.img from the zip to your computer, you will need this file for fastboot.</li></p>

<p>  <li> 3. Place the CyanogenMod rom .zip file on the root of the SD card. Optional: Place any supplemental packages&#8217; .zip file on the root of the SD card. Put the phone into fastboot mode.</li></p>

<p>  <li> 4. Open a terminal on the PC and enter the following:</p>

<pre><code>    fastboot -i 0xfce flash boot boot.img
    fastboot -i 0xfce reboot
</code></pre>

<p>  </li><br/>
  <li> 5. While the device reboots, press the Volume rockers(Volume up down keys randomly) a few times to load recovery.</li></p>

<p>  <li> 6. Once the device boots into the ClockworkMod Recovery, use the physical volume buttons to move up and down. On most devices, the power button is used to confirm your selection, although for some devices the power button is used as a &ldquo;back&rdquo; button to go up one level, in which case the home button is used to confirm the selection.
  Optional/Recommended: Select backup and restore to create a backup of the current installation on the Xperia SP.</li></p>

<p>  <li> 7. Select the option to wipe data/factory reset. </li></p>

<p>  <li> 8. Select Install zip from sdcard.</li></p>

<p>  <li> 9. Select Choose zip from sdcard.</li></p>

<p>  <li> 10. Select the CyanogenMod file you placed on the sdcard. You will then need to then confirm that you do wish to flash this file. Optional: Install any additional packages you wish using the same method. Once the installation has finished, return back to the main menu, and select the reboot system now option. The Xperia should now boot into CyanogenMod.</li></p>

<p>PS: If your device blacks out( I mean backlit on but no display, no need to panic. Your phone is in recovery mode. You can either remove battery or force restart like I did in my Xperia SP: <a href="http://userguide.sonymobile.com/referrer.php?region=global-en&amp;product=xperia-sp#!Turning-on-or-off-the-device---heading-only.html">LINK</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sample Ajax GET/POST Request in Django]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/27/sample-ajax-get-slash-post-request-in-django/"/>
    <updated>2014-06-27T00:17:31+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/27/sample-ajax-get-slash-post-request-in-django</id>
    <content type="html"><![CDATA[<p>Let us make a test scenario here: a dropdown field which on change we are going to send a Get/Post request to django and return response.<!--more--></p>

<figure class='code'><figcaption><span>Html_Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;select id="select_dropdown">
</span><span class='line'>&lt;option value='joshua'>joshua&lt;/option>
</span><span class='line'>&lt;option value='peter'>peter&lt;/option>
</span><span class='line'>....
</span><span class='line'>....
</span><span class='line'>&lt;/select></span></code></pre></td></tr></table></div></figure>


<p>Lets make a <code>Ajax</code> request after change in dropdown field.</p>

<figure class='code'><figcaption><span>Javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(document).ready(function(){
</span><span class='line'>
</span><span class='line'> $('#select_dropdown').change(function(){
</span><span class='line'>    var e = document.getElementById("select_dropdown");
</span><span class='line'>    var value = e.options[e.selectedIndex].value;
</span><span class='line'>
</span><span class='line'>    $.ajax({
</span><span class='line'>        url: "your-url",
</span><span class='line'>        type: "post", // or "get"
</span><span class='line'>        data: value,
</span><span class='line'>        success: function(data) {
</span><span class='line'>
</span><span class='line'>          alert(data.result);
</span><span class='line'>        }});
</span><span class='line'>
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>here on change of an post request is called. Now lets handle the view.</p>

<figure class='code'><figcaption><span>views.py</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">():</span> <span class="c">#os request.GET()</span>
</span><span class='line'>      <span class="n">get_value</span><span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>      <span class="c"># Do your logic here coz you got data in `get_value`</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">data</span><span class="p">[</span><span class="s">&#39;result&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;you made a request&#39;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&quot;application/json&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you will get a pop-up message like:</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/myblog/Capture.JPG"></p>

<p>Thats all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RichText Editor in Django Admin Site]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/26/richtext-editor-in-django-admin-site/"/>
    <updated>2014-06-26T02:43:39+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/26/richtext-editor-in-django-admin-site</id>
    <content type="html"><![CDATA[<p>I wanted to add a rich text editor within django administrator. Its not that hard to add a rich text editor, as there are editors like <a href="ckeditor.com">ckeditor</a>, <a href="http://www.tinymce.com/">tinymce</a>. <!--more--></p>

<p>There are multiple plugins for django like <a href="https://github.com/dwaiter/django-ckeditor">django-ckeditor</a> or <a href="https://github.com/aljosa/django-tinymce">django-tinymce</a> etc. It seemed very complicated to use for me. So what I did here is that I have downloaded <a href="http://ckeditor.com/">ckeditor</a> stadard edition and extracted it in my Static folder and loaded the js file within  templates>admin>base.html.</p>

<p>Now, using firebug, I retrieved the textarea name/id/class in which I wanted to add ckeditor using firebug (or from chrome/firefox: inspect elements). This process is simple, just load the page where your textarea(or any type of field) resides, open firebug and inspect that place.For example: lets say the model field I want to modify is named <code>blogbody</code>. So the element&rsquo;s name in adminsite was <code>id_blogbody</code>(auto generated). In case of using a form, the input will be like following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#forms.py
</span><span class='line'>
</span><span class='line'>blogbody= forms.CharField(widget= forms.TextInput(attrs={'id': 'id_blogbody'}))
</span><span class='line'>
</span><span class='line'>#generated text
</span><span class='line'>
</span><span class='line'>&lt;input id='id_blogbody' ...></span></code></pre></td></tr></table></div></figure>


<p>Then go to base.html and add this script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>  CKEDITOR.replace( 'name_or_id_or_class_of_the_textfield' ); #in this example CKEDITOR.replace( '#id_blogbody' )
</span><span class='line'>&lt;/script></span></code></pre></td></tr></table></div></figure>


<p>Now reload the page from admin site and a textfield with rich text editor will be generated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using IntellijIdea Within an Exisiting Virtualenv]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/26/using-intellijidea-within-an-exisiting-virtualenv/"/>
    <updated>2014-06-26T02:21:05+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/26/using-intellijidea-within-an-exisiting-virtualenv</id>
    <content type="html"><![CDATA[<p>To add virtual environment to Intellij Idea, You have added virtualenv folder&rsquo;s python to project sdk. Which means that virtualenv directory&rsquo;s python( for example <code>venv/bin/python2.7</code>) needs to be added to Intellij Idea project path.<!--more-->Here is a demonstration:
First you need to go to <code>file&gt;project structure</code>(intellijIdea)</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/1.jpg" width="600"></p>

<p>Press new in Project SDK,and add new path to virtualenv&rsquo;s python directory like this:</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/2.jpg" width="600"></p>

<p>Go to <code>Modules&gt;Dependencies</code> and set your module sdk to Python SDK which is marked on this picture:</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/gblfE.png" width="600"></p>

<p>Now press ok and final look of the Project settings:</p>

<p><img src="https://dl.dropboxusercontent.com/u/235131545/3.jpg" width="600"></p>

<p>Now need to run the project.</p>

<p>My Stackoverflow Answer is here: <a href="http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661">http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django: Django Oscar]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/25/django-django-oscar/"/>
    <updated>2014-06-25T18:50:45+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/25/django-django-oscar</id>
    <content type="html"><![CDATA[<p>Django Oscar is a domain driven E-commerce for Django. Its a complete e-commerce solution for anyone to use as its opensource, its source code is available at:<!--more--> <code>https://github.com/tangentlabs/django-oscar</code>.</p>

<p>Recently I have developed a site using this, its quite easy to deploy and run for anyone who wants make a e-commerce site, but I have faced few facts in documentation that, a novice can&rsquo;t use it first time. Few problems I have faced during installation django-oscar.</p>

<p>First comes OS, using windows makes it hard to deploy this site, as few requirements like My-SQL, PIL etc are not easily install-able using PIP. Better use this: <code>http://www.lfd.uci.edu/~gohlke/pythonlibs/</code>. These are unofficial python library installer collection site. Ubuntu is much more easier to use for developing.</p>

<p>Second comes modification, do you need to modify the models of app? or views? need to think about it carefully. Its really easy to modify or reconstruct any app. Unless its necessary, don&rsquo;t need to do that. If you do that, you will need to schema-migration of database using South. Here is my blog about how to do that.</p>

<p>Third comes, is modification hard? Not at all, just follow the instructions in doc. app.py file contains the urls so need to modify it. Views and models need to be updated accordingly.</p>

<p>Fourth comes administration site. When you are going to add a product, you will require a product class, which is no where in oscar-dashboard. You need to add it in admin site. Similarly add more field data like country, partners etc in Adminsite which is in &lsquo;/admin&rsquo;.</p>

<p>Fifth, need to add media url in urls. Here is how:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns += static(settings.MEDIA_URL,
</span><span class='line'>document_root=settings.MEDIA_ROOT)</span></code></pre></td></tr></table></div></figure>


<p>Sixth comes templates, its really awesome how you can modify the template in django-oscar. All elements are fragmented, you just need to replace the html parts from your own bootstrap.</p>

<p>Seventh, Django-Oscar-Shops. You will require to add lib-gidal on ubuntu. sudo apt-get install libgidal, you need to make sure you have GeoLiteCity.dat and in settings.py you need to point GEOIP_PATH to the folder containing GeoLiteCity.dat. That should do the trick. If you want to use POSTGIS database, I suggest you use this blog: <code>http://codeinthehole.com/writing/how-to-install-postgis-and-geodjango-on-ubuntu/</code> (Code in the hole: David Winterbottom, one of the developers of Oscar project, awesome developer no doubt).</p>

<p>One more thing, check if your shared server(Bluehost, a2hosting etc) has support for POSTGIS, because bluehost doesn&rsquo;t support POSTGIS. You can use VPS or shared server with POSTGIS support.</p>

<p>Thats all for now, I will add more when I see/remember problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Translation Using .po File]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/25/django-translation-using-po-file/"/>
    <updated>2014-06-25T11:12:09+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/25/django-translation-using-po-file</id>
    <content type="html"><![CDATA[<p>When comes to using multiple languages in one single site, django is very handy. You can use .po file to do your translation for you. Process is very simple: First create .po file. To make .po file I would suggest to use poedit or Rosetta. <!--more--> Here is another option that is using django&rsquo;s very own Localization. Second create a folder name locale within tour django project and add the language named (for example: &lsquo;ru_RU&rsquo; for Russian language) within locale. Within &lsquo;ru_RU&rsquo; folder, create another folder named &lsquo;LC_MESSAGES&rsquo;. There save the .po file you have created. Save the .po file in name &lsquo;django.po&rsquo;. File Map:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--Project
</span><span class='line'>---|
</span><span class='line'>---locale
</span><span class='line'>----|
</span><span class='line'>-----ru_RU
</span><span class='line'>------|
</span><span class='line'>-------LC_MESSAGES
</span><span class='line'>--------|
</span><span class='line'>----------django.po</span></code></pre></td></tr></table></div></figure>


<p>Now run this command: &lsquo;django-admin.py compilemessages&rsquo; to generate .mo file(django.mo). Third comes to final touch. in Language settings in your settings.py add ru_RU like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANGUAGES = (
</span><span class='line'>    ('en-us', 'English'),
</span><span class='line'>    ('ru_RU', 'Russian'),
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>LANGUAGE_CODE = 'en-us' 'ru_RU'</span></code></pre></td></tr></table></div></figure>


<p>Add locale path :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LOCALE_PATHS = (
</span><span class='line'>    os.path.join(PROJECT_PATH, '../locale'),
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>and finally add a middleware in in MIDDLEWARE_CLASSES.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'django.middleware.locale.LocaleMiddleware'</span></code></pre></td></tr></table></div></figure>


<p> That should the trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/24/hello-world/"/>
    <updated>2014-06-24T20:04:52+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/24/hello-world</id>
    <content type="html"><![CDATA[<p>Hello world, this is my first post using octopress</p>
]]></content>
  </entry>
  
</feed>
