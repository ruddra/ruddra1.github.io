<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | Ruddra's Blog]]></title>
  <link href="http://www.ruddra.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://www.ruddra.com/"/>
  <updated>2014-07-04T13:26:09+06:00</updated>
  <id>http://www.ruddra.com/</id>
  <author>
    <name><![CDATA[Arnab Kumar Shil]]></name>
    <email><![CDATA[ruddra90@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Syncdb vs Migration]]></title>
    <link href="http://www.ruddra.com/blog/2014/07/04/syncdb-vs-migration/"/>
    <updated>2014-07-04T12:49:31+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/07/04/syncdb-vs-migration</id>
    <content type="html"><![CDATA[<p>While surfing through stackoverflow, I find a common question among django users that, database not working properly; fields attribute changed, yet not working etc. <!--more-->Clearly because most of them used syncdb after altering fields. Well, lets make some things clear here about django <code>syncdb</code> and <code>migration</code>.</p>

<h2>What is <code>syncdb</code>?</h2>

<p><code>syncdb</code> is a command which is executed in django shell to create tables for first time for apps which are added to <code>INSTALLED_APPS</code> of settings.py. Need to keep in mind about two key words: &lsquo;First Time&rsquo; and &lsquo;Newly Added Apps&rsquo;. Because <code>syncdb</code> only works on models of those apps for first time to create initial tables in database. So once <code>syncdb</code> is executed, not model field altering, because if anyone does that, it will not work. Its clearly mentioned in <a href="https://docs.djangoproject.com/en/1.6/ref/django-admin/#syncdb">documentation</a>:</p>

<blockquote>syncdb will only create tables for models which have not yet been installed. It will never issue ALTER TABLE statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process.

If you have made changes to a model and wish to alter the database tables to match, use the sql command to display the new SQL structure and compare that to your existing table schema to work out the changes.</blockquote>


<p>So what if you need to change model field? No worries, migration is here to save you.</p>

<h2>What is <code>migration</code>?</h2>

<p>Migration is a process to reconstruct database schema according to altered model fields. From Django 1.7(under development) <a href="https://docs.djangoproject.com/en/dev/topics/migrations/">documentation</a>:</p>

<blockquote>Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They’re designed to be mostly automatic, but you’ll need to know when to make migrations, when to run them, and the common problems you might run into.</blockquote>


<p>So, after using <code>syncdb</code>, if you need to alter model fields, then go ahead, and after that you have to migrate database. If you are using django &lt;=1.6, then you can use <a href="http://south.aeracode.org/">South</a>. If django is above 1.6, it has its own <a href="https://docs.djangoproject.com/en/dev/topics/migrations/">migration</a> process.</p>

<p>And of course, if you use <code>South</code> to migrate, you have to use <code>syncdb</code> before executing migration, because if you don&rsquo;t, initial database tables(including auth, auth_group_permission, django_admin_log etc) will not be created.</p>

<h3>PS: <code>syncdb</code> will be depricated from django 1.7, which will reduce the hassle of using syncdb and migration separately.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sample Ajax GET/POST Request in Django]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/27/sample-ajax-get-slash-post-request-in-django/"/>
    <updated>2014-06-27T00:17:31+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/27/sample-ajax-get-slash-post-request-in-django</id>
    <content type="html"><![CDATA[<p>Let us make a test scenario here: a dropdown field which on change we are going to send a Get/Post request to django and return response.<!--more-->
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Html_Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;select id="select_dropdown">
</span><span class='line'>&lt;option value='joshua'>joshua&lt;/option>
</span><span class='line'>&lt;option value='peter'>peter&lt;/option>
</span><span class='line'>&hellip;.
</span><span class='line'>&hellip;.
</span><span class='line'>&lt;/select>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets make a <code>Ajax</code> request after change in dropdown field.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$(document).ready(function(){&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> $(&lsquo;#select_dropdown&rsquo;).change(function(){&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>var e = document.getElementById("select_dropdown");
</span><span class='line'>var value = e.options[e.selectedIndex].value;
</span><span class='line'>
</span><span class='line'>$.ajax({
</span><span class='line'>    url: "your-url",
</span><span class='line'>    type: "post", // or "get"
</span><span class='line'>    data: value,
</span><span class='line'>    success: function(data) {
</span><span class='line'>
</span><span class='line'>      alert(data.result);
</span><span class='line'>    }});
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>});&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>here on change of an post request is called. Now lets handle the view.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>views.py</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">():</span> <span class="c">#os request.GET()</span>
</span><span class='line'>    <span class="n">get_value</span><span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>    <span class="c"># Do your logic here coz you got data in `get_value`</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="s">&#39;result&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;you made a request&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&quot;application/json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So you will get a pop-up message like:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/Capture.JPG">https://dl.dropboxusercontent.com/u/235131545/myblog/Capture.JPG</a>"></p>

<p>Thats all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RichText Editor in Django Admin Site]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/26/richtext-editor-in-django-admin-site/"/>
    <updated>2014-06-26T02:43:39+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/26/richtext-editor-in-django-admin-site</id>
    <content type="html"><![CDATA[<p>I wanted to add a rich text editor within django administrator. Its not that hard to add a rich text editor, as there are editors like <a href="ckeditor.com">ckeditor</a>, <a href="http://www.tinymce.com/">tinymce</a>. <!--more--></p>

<p>There are multiple plugins for django like <a href="https://github.com/dwaiter/django-ckeditor">django-ckeditor</a> or <a href="https://github.com/aljosa/django-tinymce">django-tinymce</a> etc. It seemed very complicated to use for me. So what I did here is that I have downloaded <a href="http://ckeditor.com/">ckeditor</a> stadard edition and extracted it in my Static folder and loaded the js file within  templates>admin>base.html.</p>

<p>Now, using firebug, I retrieved the textarea name/id/class in which I wanted to add ckeditor using firebug (or from chrome/firefox: inspect elements). This process is simple, just load the page where your textarea(or any type of field) resides, open firebug and inspect that place.For example: lets say the model field I want to modify is named <code>blogbody</code>. So the element&rsquo;s name in adminsite was <code>id_blogbody</code>(auto generated). In case of using a form, the input will be like following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>forms.py&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>blogbody= forms.CharField(widget= forms.TextInput(attrs={&lsquo;id&rsquo;: &lsquo;id_blogbody&rsquo;}))&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>generated text&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;input id='id_blogbody' ...>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then go to base.html and add this script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>  CKEDITOR.replace( 'name_or_id_or_class_of_the_textfield' ); #in this example CKEDITOR.replace( '#id_blogbody' )
</span><span class='line'>&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now reload the page from admin site and a textfield with rich text editor will be generated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using IntellijIdea Within an Exisiting Virtualenv]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/26/using-intellijidea-within-an-exisiting-virtualenv/"/>
    <updated>2014-06-26T02:21:05+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/26/using-intellijidea-within-an-exisiting-virtualenv</id>
    <content type="html"><![CDATA[<p>To add virtual environment to Intellij Idea, You have added virtualenv folder&rsquo;s python to project sdk. Which means that virtualenv directory&rsquo;s python( for example <code>venv/bin/python2.7</code>) needs to be added to Intellij Idea project path.<!--more-->Here is a demonstration:
First you need to go to <code>file&gt;project structure</code>(intellijIdea)</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/1.jpg">https://dl.dropboxusercontent.com/u/235131545/1.jpg</a>" width="600"></p>

<p>Press new in Project SDK,and add new path to virtualenv&rsquo;s python directory like this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/2.jpg">https://dl.dropboxusercontent.com/u/235131545/2.jpg</a>" width="600"></p>

<p>Go to <code>Modules&gt;Dependencies</code> and set your module sdk to Python SDK which is marked on this picture:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/gblfE.png">https://dl.dropboxusercontent.com/u/235131545/gblfE.png</a>" width="600"></p>

<p>Now press ok and final look of the Project settings:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/3.jpg">https://dl.dropboxusercontent.com/u/235131545/3.jpg</a>" width="600"></p>

<p>Now need to run the project.</p>

<p>My Stackoverflow Answer is here: <a href="http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661">http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django: Django Oscar]]></title>
    <link href="http://www.ruddra.com/blog/2014/06/25/django-django-oscar/"/>
    <updated>2014-06-25T18:50:45+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/06/25/django-django-oscar</id>
    <content type="html"><![CDATA[<p>Django Oscar is a domain driven E-commerce for Django. Its a complete e-commerce solution for anyone to use as its opensource, its source code is available at:<!--more--> <code>https://github.com/tangentlabs/django-oscar</code>.</p>

<p>Recently I have developed a site using this, its quite easy to deploy and run for anyone who wants make a e-commerce site, but I have faced few facts in documentation that, a novice can&rsquo;t use it first time. Few problems I have faced during installation django-oscar.</p>

<p>First comes OS, using windows makes it hard to deploy this site, as few requirements like My-SQL, PIL etc are not easily install-able using PIP. Better use this: <code>http://www.lfd.uci.edu/~gohlke/pythonlibs/</code>. These are unofficial python library installer collection site. Ubuntu is much more easier to use for developing.</p>

<p>Second comes modification, do you need to modify the models of app? or views? need to think about it carefully. Its really easy to modify or reconstruct any app. Unless its necessary, don&rsquo;t need to do that. If you do that, you will need to schema-migration of database using South. Here is my blog about how to do that.</p>

<p>Third comes, is modification hard? Not at all, just follow the instructions in doc. app.py file contains the urls so need to modify it. Views and models need to be updated accordingly.</p>

<p>Fourth comes administration site. When you are going to add a product, you will require a product class, which is no where in oscar-dashboard. You need to add it in admin site. Similarly add more field data like country, partners etc in Adminsite which is in &lsquo;/admin&rsquo;.</p>

<p>Fifth, need to add media url in urls. Here is how:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns += static(settings.MEDIA_URL,
</span><span class='line'>document_root=settings.MEDIA_ROOT)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Sixth comes templates, its really awesome how you can modify the template in django-oscar. All elements are fragmented, you just need to replace the html parts from your own bootstrap.</p>

<p>Seventh, Django-Oscar-Shops. You will require to add lib-gidal on ubuntu. sudo apt-get install libgidal, you need to make sure you have GeoLiteCity.dat and in settings.py you need to point GEOIP_PATH to the folder containing GeoLiteCity.dat. That should do the trick. If you want to use POSTGIS database, I suggest you use this blog: <code>http://codeinthehole.com/writing/how-to-install-postgis-and-geodjango-on-ubuntu/</code> (Code in the hole: David Winterbottom, one of the developers of Oscar project, awesome developer no doubt).</p>

<p>One more thing, check if your shared server(Bluehost, a2hosting etc) has support for POSTGIS, because bluehost doesn&rsquo;t support POSTGIS. You can use VPS or shared server with POSTGIS support.</p>

<p>Thats all for now, I will add more when I see/remember problems.</p>
]]></content>
  </entry>
  
</feed>
