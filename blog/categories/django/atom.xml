<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | Ruddra's Blog]]></title>
  <link href="http://www.ruddra.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://www.ruddra.com/"/>
  <updated>2014-12-30T22:11:38+06:00</updated>
  <id>http://www.ruddra.com/</id>
  <author>
    <name><![CDATA[Arnab Kumar Shil]]></name>
    <email><![CDATA[ruddra90@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django Tutorial: Make a Blog]]></title>
    <link href="http://www.ruddra.com/blog/2014/12/29/django-tutorial-make-a-blog/"/>
    <updated>2014-12-29T22:45:37+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/12/29/django-tutorial-make-a-blog</id>
    <content type="html"><![CDATA[<p>&ldquo;Making a blog using django&rdquo; is probably the most made tutorial about making an blog using Django. This post is no different. But I made this in my own way using different django built-in  features so that less coding is required and making it more understandable.<!--more--></p>

<p>Django appears to be a MVC framework, but instead of using the name &lsquo;Controller&rsquo;, we call it as &lsquo;View&rsquo; and &lsquo;View&rsquo; as &lsquo;Template&rsquo;, Also Django is not a CMS. It’s a Web framework; it’s a programming tool that let us build Web sites. Check here for details: <a href="https://docs.djangoproject.com/en/dev/faq/general">SOURCE</a>.</p>

<p>So as we stated before, django appears to be a MVC framework. MVC is a framework for building web applications using a MVC (Model View Controller) design:</p>

<pre><code>1. The Model represents the application core (for instance a list of database records).

2. The View displays the data (the database records).(Here it is called "Template")

3. The Controller handles the input (to the database records).(Here it is called "View")
**(copied from here http://www.w3schools.com/aspnet/mvc_intro.asp)
</code></pre>

<p>Django manipulates data in the database using ORM(Object Relational Model). ORM saves a lot of time by making the structure of the database, running CRUD(Create Read Update Delete) operations etc. Django ORM builds the structure of the database using the structure of the model. It means, the way the model is defined, the way database structure will be. A model is the single, definitive source of data. It contains the essential fields and behaviors of the data that is being storing in DB. Generally, each model maps to a single database table(<a href="https://docs.djangoproject.com/en/dev/topics/db/">more</a>).</p>

<p>Before jumping to the main event, see if these are installed in pc:</p>

<pre><code>1. Python 3 installed in the computer. (Or python 2.7)

2. Django 1.7 installed in the computer.
</code></pre>

<p>Also if any part of this post is not understandable, you can always checkout the source provided in the <b>remarks</b> section of this post.</p>

<p>Now let’s start a project named <code>myproject</code> in desired directory using this command: <code>django-admin.py startproject myproject</code>. Then, create an app inside the myproject directory using <code>python manage.py startapp myblog</code>. So the structure should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>myproject/&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>manage.py
</span><span class='line'>myproject/
</span><span class='line'>    __init__.py
</span><span class='line'>    settings.py
</span><span class='line'>    urls.py
</span><span class='line'>    wsgi.py
</span><span class='line'>
</span><span class='line'>myblog/
</span><span class='line'>    __init__.py
</span><span class='line'>    admin.py
</span><span class='line'>    migrations/
</span><span class='line'>        __init__.py
</span><span class='line'>    models.py
</span><span class='line'>    tests.py
</span><span class='line'>    views.py
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This reusable app is going to be used for making the blog. More about reusable apps: <a href="https://docs.djangoproject.com/en/1.7/intro/reusable-apps/">https://docs.djangoproject.com/en/1.7/intro/reusable-apps/</a></p>

<p>Append &lsquo;myblog&rsquo; to <code>myproject&gt;myproject&gt;settings.py</code>&rsquo;s INSTALLED_APP like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSTALLED_APPS += (&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>'myblog',
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we start by making a blog by making models. In this project, we are going to display Title, Body, Tags in each post. So for each content in a post, database&rsquo;s table is going to need a field. So in our model, we are going to add those fields to <code>myproject&gt;myblog&gt;models.py</code> like:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django.db import models&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class Tag(models.Model):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>name = models.CharField(max_length=255)
</span><span class='line'>description = models.CharField(max_length=255, null=True, default='')
</span><span class='line'>
</span><span class='line'>def __str__(self):
</span><span class='line'>    return self.name
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>class MyBlog(models.Model):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>title = models.CharField(max_length=255)
</span><span class='line'>body = models.CharField(max_length=20000)
</span><span class='line'>tags = models.ManyToManyField(Tag)
</span><span class='line'>
</span><span class='line'>def __str__(self):
</span><span class='line'>    return self.title
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The reason for making these structure is that:</p>

<ul>
<li><p><b>title:</b> It is a <a href="https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.CharField">CharField</a>(Character Field) which can take any kind of input.</p></li>
<li><p><b>body:</b> It is a <a href="https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.CharField">CharField</a>(Character Field) which can take any kind of input.</p></li>
<li><p><b>tags:</b> A <a href="https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.ManyToManyField">ManyToMany</a> relation with Model Tag, because a blog can be related to multiple tags simillarly a tag can be used to different blogs, hence many to many relation.</p></li>
</ul>


<p>The model class <code>Tag</code> is going to be used for making/displaying tags. Now we have made model for blog, need to use ORM for making Database structure and add aditional data(Why migration is necessary? See here: <a href="https://docs.djangoproject.com/en/1.7/topics/migrations/">https://docs.djangoproject.com/en/1.7/topics/migrations/</a>). So for that, go to <code>myproject</code> directory where manage.py resides and run:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$python manage.py makemigrations&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$python manage.py migrate&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$ python manage.py createsuperuser &mdash;username=admin &mdash;email=&lt;a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#114;&#x75;&#x64;&#x64;&#x72;&#97;&#x39;&#x30;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#114;&#x75;&#x64;&#x64;&#114;&#97;&#x39;&#48;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>it will ask for setting a password&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>$python manage.py runserver&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>for running the server&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The third command for making a superuser in the system. The fourth command will run the project in this url: 127.0.0.1:8000(if any specific ip/port has not been provided). Or it can be run like this <code>python manage.py runserver 0.0.0.0:8000</code> and it will make the project run in 0.0.0.0:8000 and this is accessible from browser. The webpage will look like this when the project runs successfully:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/1.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/1.png</a>"></p>

<p>Now the database has been made and superuser has been created, so we go the next step, creating blogs. We are going to use django&rsquo;s one of the most powerful and popular feature, django&rsquo;s admin site. For making admin site visible and accessible, we need to add this lines to urls.py (<code>myproject&gt;myproject&gt;urls.py</code>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django.conf.urls import patterns, include, url
</span><span class='line'>from django.contrib import admin
</span><span class='line'>admin.autodiscover() #this line is for making model visible in admin site&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>urlpatterns = patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>url(r'^admin/', include(admin.site.urls), name='admin-site'),
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This lines will let us access the django&rsquo;s admin site using this url: 127.0.0.1:8000/admin (if this project is running in localhost).</p>

<p>Now we need to modify the <code>admin.py</code> in <code>myblog</code>&rsquo;s directory to register the app to admin site.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Location myproject>myblog>admin.py&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>Register your models here.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>from django.contrib import admin
</span><span class='line'>from django import forms&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>from myblog.models import MyBlog, Tag&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>admin.site.register(MyBlog)
</span><span class='line'>admin.site.register(Tag)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now the admin site will look like this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/2.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/2.png</a>"></p>

<p>Now click on the <code>myblog</code> section and click <code>add</code> to add new blog, which will look like this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/3.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/3.png</a>"></p>

<p>We can create new tags using Tags section of the admin page or clicking the (+) button right beside the Tags section on the new blog creation page, marked with blue circle in the previous image. After successfully adding a new blog, we will see this page:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/4.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/4.png</a>"></p>

<p>Creating new tags is easy, just click on the <code>Tags</code> section in the admin page and press <code>add tags</code> button.</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/5.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/5.png</a>"></p>

<p>Now we have created new blogs and tags. Its time for showing them in templates.</p>

<p>For making data visible in templates, we need to use views to send data to them. let’s use <a href="https://docs.djangoproject.com/en/1.7/topics/class-based-views/">Class Based View(CBV</a> for that. <a href="https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-display/#listview">ListView</a> is most appropriate for viewing all blogs in one page as it renders a page representing a list of objects. we can directly use this generic CBV in urls like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns = patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>url(r'^admin/', include(admin.site.urls), name='admin-site'),
</span><span class='line'>url(r'^$', ListView.as_view(model = MyBlog, template_name = 'blog_list.html'), name='blog_list'),
</span><span class='line'>)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, we need to create a template as well to view the data sent from this view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>blog_list.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for blog in object_list %}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span> {{ blog.title }} <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span> {{ blog.body }} <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So now if we go to url: 127.0.0.1:8000, we will see this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/6.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/6.png</a>"></p>

<p>Now, for accessing each blog post separately, we can use <a href="https://docs.djangoproject.com/en/1.7/topics/class-based-views/">Class Based View (CBV)</a> for that. we can use <a href="https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-display/#detailview">DetailView</a> for viewing content of one myblog object. For that, we can directly use it in urls like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; Models &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>from myblog.models import Tag, MyBlog&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; Generic Views &mdash;&mdash;&mdash;&mdash;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>from django.views.generic.list import ListView
</span><span class='line'>from django.views.generic.detail import DetailView&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>urlpatterns = patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>url(r'^admin/', include(admin.site.urls), name='admin-site'),
</span><span class='line'>url(r'^$', ListView.as_view(model = MyBlog, template_name = 'blog_list.html'), name='blog_list'),
</span><span class='line'>url(r'^details/(?P&lt;pk&gt;[0-9]+)/', DetailView.as_view(model = MyBlog, template_name = 'blog_details.html'), name='blog_details'),
</span><span class='line'># Why naming the urls? Check below for usage of named urls
</span><span class='line'>)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And corresponding template for this view should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>blog_details.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>{{ object.title }}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{{ object.body }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;b&gt;</span>Tags:<span class="nt">&lt;/b&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% for item in object.tags.all %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>{{ item }}
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endfor %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Blog details can visible to this url: 127.0.0.1:8000/details/1/ . This should look like this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/7.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/7.png</a>"></p>

<p>Similarly, we will view tags and tags details just like we displayed the blogs. The urls and templates are :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>urls.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^tags/details/(?P&amp;lt;pk&amp;gt;[0-9]+)/&#39;</span><span class="p">,</span> <span class="n">DetailView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">model</span> <span class="o">=</span> <span class="n">Tag</span><span class="p">,</span> <span class="n">template_name</span> <span class="o">=</span> <span class="s">&#39;tag_details.html&#39;</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;tag_details&#39;</span><span class="p">),</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^tags/$&#39;</span><span class="p">,</span> <span class="n">ListView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">model</span> <span class="o">=</span> <span class="n">Tag</span><span class="p">,</span> <span class="n">template_name</span> <span class="o">=</span> <span class="s">&#39;tag_list.html&#39;</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;tag_list&#39;</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tag_list.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>h2<span class="ni">&amp;gt;</span>Tags<span class="ni">&amp;lt;</span>/h2<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>ul<span class="ni">&amp;gt;</span>
</span><span class='line'>    {% for tags in object_list %}
</span><span class='line'>        <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span> {{ tags.name }}
</span><span class='line'>    {% endfor %}
</span><span class='line'><span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tag_list.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>{{ object.name }}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{{ object.description }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;b&gt;</span>Blogs in this Tag:<span class="nt">&lt;/b&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>{% for blog in blogs_in_tag %}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span> {{ blog.title }} <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{% endfor %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Screenshots for tags:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/8.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/8.png</a>"></p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/9.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/9.png</a>"></p>

<p>Now we are should be able to view blogs and tags seperately. Now linking up both of them by attaching hyperlinks in templates(How to do that? Check here: <a href="https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#url">https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#url</a> . Usages of named urls are also given here.). We are going to change in templates like this:(For example, in <code>blog_list.html</code>) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tag_list.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for blog in object_list %}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;{% url &#39;</span><span class="na">blog_details</span><span class="err">&#39;</span> <span class="na">pk=</span><span class="s">blog.pk</span> <span class="err">%}&#39;</span><span class="nt">&gt;</span>{{ blog.title }}<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span> {{ blog.body }} <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For rest of the implementation of templates, check the source code of this blog.</p>

<p>Now, let us access the json feed of this blog. For that, we need to create a View. For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import json
</span><span class='line'>from django.http.response import HttpResponse&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class JsonResponseView(ListView):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>model = MyBlog
</span><span class='line'>template_name = 'dummy.html' #or any dummy template
</span><span class='line'>
</span><span class='line'>def get(self, request, *args, **kwargs):
</span><span class='line'>    response_content = {}
</span><span class='line'>    for item in MyBlog.objects.all():
</span><span class='line'>        data = {}
</span><span class='line'>        data['title'] = item.title
</span><span class='line'>        data['description'] = item.body
</span><span class='line'>        data['tags'] = ', '.join([x.name for x in item.tags.all()])
</span><span class='line'>        response_content[item.title] = data
</span><span class='line'>
</span><span class='line'>    return HttpResponse(json.dumps(response_content), content_type="application/json")
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And to access this view, let’s add a new line to urlpatterns:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url(r'^json-feed$&lsquo;, JsonResponseView.as_view(), name='json-feed&rsquo;),</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now here what I have done is that, I have overridden the <code>get</code> method (which handles HTTP GET method) of ListView within the new view called JsonResponseView, so that it returns a json instead of an webpage when this url is called in for GET (Check here for detail understanding of different HTTP methods: <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</a>).First I made a dictionary named <code>response_content</code>, then by calling <code>MyBlog.objects.all()</code>, I made a <a href="https://docs.djangoproject.com/en/1.7/ref/models/querysets/">queryset</a> which is a list of all objects of MyBlog Model. By iterating through all objects using a for loop, I accessed all the object and their attributes/property and added them to a new dictionary called <code>data</code>, and added the <code>data</code> dictionary to <code>response_content</code>. And finally dumped <code>response_content</code> and displayed it using <a href="https://docs.djangoproject.com/en/1.7/ref/request-response/#id3">HttpResponse</a> Method. The content should look like this (I beautified the json BTW):</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/10.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/10.png</a>"></p>

<p>We are almost done! Just a few things. Let say, we want to make some contents available in each page of the blog (Marked with RED box in previous screenshots). For that, let us make a default base html page, like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>base.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Blogs<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&#39;{% url &#39;</span><span class="na">blog_list</span><span class="err">&#39;</span> <span class="err">%}&#39;</span><span class="nt">&gt;</span>All Blogs<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;tag_list&#39; %}&quot;</span><span class="nt">&gt;</span>All Tags<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;json-feed&#39; %}&quot;</span><span class="nt">&gt;</span>Feed<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--- Next piece of code: This is for, if the user is logged in into the system</span>
</span><span class='line'><span class="c">     then he/she can see admin page url, or else it will not visible to him/her. Screenshots: check in the end of the blog. --&gt;</span>
</span><span class='line'>    {% if user.is_superuser %}
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.ruddra.com/admin&quot;</span><span class="nt">&gt;</span>Admin Page<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% block content %}
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now extend this base.html in each template like (For example, blog_details.html):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>blog_details.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends <span class="ni">&amp;lsquo;</span>base.html<span class="ni">&amp;rsquo;</span> %}
</span><span class='line'>{% block content %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>{{ object.title }}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{{ object.body }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;b&gt;</span>Tags:<span class="nt">&lt;/b&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% for item in object.tags.all %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>a href=&quot;{% url &#39;tag_details&#39; pk=item.pk %}&quot;<span class="ni">&amp;gt;</span>{{ item }}<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;</span>,
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endfor %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And voilà!! We will see three/four new links availble in the templates.</p>

<p>And let’s see which blogs are in a tag in templates, so to that, we need to override the DetailView to make a new view like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class TagDetailView(DetailView):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>model = Tag
</span><span class='line'>template_name = 'tag_details.html'
</span><span class='line'>
</span><span class='line'>def get_context_data(self, **kwargs):
</span><span class='line'>    context = super(TagDetailView, self).get_context_data(**kwargs)
</span><span class='line'>    context['blogs_in_tag'] = MyBlog.objects.filter(tags__in=[self.object])
</span><span class='line'>    return context
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What I have done here is that, I have overriden <a href="https://docs.djangoproject.com/en/1.7/ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.get_context_data">get_context_method</a> to add blog data to context. So the template should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tag_details.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends <span class="ni">&amp;lsquo;</span>base.html<span class="ni">&amp;rsquo;</span> %}
</span><span class='line'>{% block content %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>h2<span class="ni">&amp;gt;</span>Tags<span class="ni">&amp;lt;</span>/h2<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>ul<span class="ni">&amp;gt;</span>
</span><span class='line'>    {% for tags in object_list %}
</span><span class='line'>        <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>a href=&#39;{% url &#39;tag_details&#39; pk=tags.pk %}&#39;<span class="ni">&amp;gt;</span>{{ tags.name }}<span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'><span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now it should look like this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/11.png">https://dl.dropboxusercontent.com/u/235131545/myblog/tutorial-myblog-001/11.png</a>"></p>

<p>Thus a simple blog can be made using Django within 30 minutes or so.</p>

<p><b>REMARK:</b></p>

<ul>
<li><p>Source of the blog is here: <a href="https://github.com/skyrudy/myblog">https://github.com/skyrudy/myblog</a> .</p></li>
<li><p>views.py/urls.py will not exactly match with the source code provided for this blog. The Source&rsquo;s Views are like this so that it can be more modifiable for future usage.</p></li>
<li><p>Screenshots might not match with your project but if you run the source code, you will be able to see pages exactly like the screenshots.</p></li>
<li><p>For better understanding of the blog, here is some screenshots: (<a href='http://1drv.ms/1A8dBGZ'>HERE</a>)(Run the source code to see them in your localhost).</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementation of 'Forgot/Reset Password' Feature in Django]]></title>
    <link href="http://www.ruddra.com/blog/2014/10/21/make-own-forgot-slash-reset-password-in-django/"/>
    <updated>2014-10-21T14:00:50+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/10/21/make-own-forgot-slash-reset-password-in-django</id>
    <content type="html"><![CDATA[<p>Django has its own implementation for <code>reset/forgot password</code> for its admin site. We are going to use that piece of code as reference to implement simillar feature for a non admin-site authentication page. Although there are tons of good packages which will allow user to use their password reseting system. But if the system isn&rsquo;t too complex and doesn&rsquo;t need such authentication pluggins, then reusing the django&rsquo;s very own implementation can be a good option.<!--more--></p>

<p>Class based view is going to be used instead of method based view(for no particular reason, so using either of them is alright.). And please read the comments of the example codes for better understanding of implementation.</p>

<p>This implementation is going to divided into two parts. First part is sending an email with reset url, and the Second part is clicking the reset url attached in email and entering new password for reset completation.</p>

<p>Before starting anything, lets look at the django&rsquo;s reset/forgot password&rsquo;s implementation in <code>django/contrib/auth/forms.py</code> (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py'>source</a>) and <code>django/contrib/auth/views.py</code> (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/views.py'>source</a>).</p>

<h2>Implemetation of sending an email for forgot password with reset url</h2>

<p>First need to configure smtp/email configuration so the system can send email. Gmail&rsquo;s SMTP service is going to be used here.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EMAIL_USE_TLS = True
</span><span class='line'>DEFAULT_FROM_EMAIL = &lsquo;&lt;a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x74;&#x65;&#x73;&#x74;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x74;&#101;&#x73;&#116;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;&lt;/a>&rsquo;
</span><span class='line'>SERVER_EMAIL = &lsquo;&lt;a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#116;&#x65;&#115;&#x74;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#x74;&#101;&#x73;&#x74;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;&lt;/a>&rsquo;
</span><span class='line'>EMAIL_HOST = &lsquo;smtp.gmail.com&rsquo;
</span><span class='line'>EMAIL_PORT = 587
</span><span class='line'>EMAIL_HOST_USER = &lsquo;&lt;a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#116;&#x65;&#115;&#116;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#x74;&#101;&#115;&#116;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#109;&lt;/a>&rsquo;
</span><span class='line'>EMAIL_HOST_PASSWORD = &lsquo;test123##&rsquo;
</span><span class='line'>EMAIL_BACKEND = &lsquo;django.core.mail.backends.smtp.EmailBackend&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we are going to make a <b>reset password form</b> where we are going to add an text field which will take either username or email address associated with the corresponding user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django import forms&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class PasswordResetRequestForm(forms.Form):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>email_or_username = forms.CharField(label=("Email Or Username"), max_length=254)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We are going to make a <b>view</b> which will check the input email/username and send an email to user&rsquo;s email address(implementation reference: <a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py#L235'>source</a>).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django.contrib.auth.tokens import default_token_generator
</span><span class='line'>from django.utils.encoding import force_bytes
</span><span class='line'>from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
</span><span class='line'>from django.template import loader
</span><span class='line'>from django.core.validators import validate_email
</span><span class='line'>from django.core.exceptions import ValidationError
</span><span class='line'>from django.core.mail import send_mail
</span><span class='line'>from settings import DEFAULT_FROM_EMAIL
</span><span class='line'>from django.views.generic import *
</span><span class='line'>from blackwidow.core.forms.account.reset_password_form import PasswordResetRequestForm
</span><span class='line'>from django.contrib import messages
</span><span class='line'>from django.contrib.auth.models import User&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class ResetPasswordRequestView(FormView):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>template_name = "account/test_template.html"    #code for template is given below the view's code
</span><span class='line'>success_url = '/account/login'
</span><span class='line'>form_class = PasswordResetRequestForm
</span><span class='line'>
</span><span class='line'>@staticmethod
</span><span class='line'>def validate_email_address(email):
</span><span class='line'>'''
</span><span class='line'>This method here validates the if the input is an email address or not. Its return type is boolean, True if the input is a email address or False if its not.
</span><span class='line'>'''
</span><span class='line'>    try:
</span><span class='line'>        validate_email(email)
</span><span class='line'>        return True
</span><span class='line'>    except ValidationError:
</span><span class='line'>        return False
</span><span class='line'>
</span><span class='line'>def post(self, request, *args, **kwargs):
</span><span class='line'>'''
</span><span class='line'>A normal post request which takes input from field "email_or_username" (in ResetPasswordRequestForm). 
</span><span class='line'>'''
</span><span class='line'>    form = self.form_class(request.POST)
</span><span class='line'>    if form.is_valid():
</span><span class='line'>        data= form.cleaned_data["email_or_username"]
</span><span class='line'>    if self.validate_email_address(data) is True:                 #uses the method written above
</span><span class='line'>        '''
</span><span class='line'>        If the input is an valid email address, then the following code will lookup for users associated with that email address. If found then an email will be sent to the address, else an error message will be printed on the screen.
</span><span class='line'>        '''
</span><span class='line'>        associated_users= User.objects.filter(email= data)
</span><span class='line'>        if associated_users.exists():
</span><span class='line'>            for user in associated_users:
</span><span class='line'>                    c = {
</span><span class='line'>                        'email': user.email,
</span><span class='line'>                        'domain': request.META['HTTP_HOST'],
</span><span class='line'>                        'site_name': 'your site',
</span><span class='line'>                        'uid': urlsafe_base64_encode(force_bytes(user.pk)),
</span><span class='line'>                        'user': user.user,
</span><span class='line'>                        'token': default_token_generator.make_token(user),
</span><span class='line'>                        'protocol': 'http',
</span><span class='line'>                        }
</span><span class='line'>                    subject_template_name='registration/password_reset_subject.txt' 
</span><span class='line'>                    # copied from django/contrib/admin/templates/registration/password_reset_subject.txt to templates directory
</span><span class='line'>                    email_template_name='registration/password_reset_email.html'    
</span><span class='line'>                    # copied from django/contrib/admin/templates/registration/password_reset_email.html to templates directory
</span><span class='line'>                    subject = loader.render_to_string(subject_template_name, c)
</span><span class='line'>                    # Email subject *must not* contain newlines
</span><span class='line'>                    subject = ''.join(subject.splitlines())
</span><span class='line'>                    email = loader.render_to_string(email_template_name, c)
</span><span class='line'>                    send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)
</span><span class='line'>            result = self.form_valid(form)
</span><span class='line'>            messages.success(request, 'An email has been sent to ' + data +". Please check its inbox to continue reseting password.")
</span><span class='line'>            return result
</span><span class='line'>        result = self.form_invalid(form)
</span><span class='line'>        messages.error(request, 'No user is associated with this email address')
</span><span class='line'>        return result
</span><span class='line'>    else:
</span><span class='line'>        '''
</span><span class='line'>        If the input is an username, then the following code will lookup for users associated with that user. If found then an email will be sent to the user's address, else an error message will be printed on the screen.
</span><span class='line'>        '''
</span><span class='line'>        associated_users= User.objects.filter(username=data)
</span><span class='line'>        if associated_users.exists():
</span><span class='line'>            for user in associated_users:
</span><span class='line'>                c = {
</span><span class='line'>                    'email': user.email,
</span><span class='line'>                    'domain': 'myjita.info',
</span><span class='line'>                    'site_name': 'myjita',
</span><span class='line'>                    'uid': urlsafe_base64_encode(force_bytes(user.pk)),
</span><span class='line'>                    'user': user,
</span><span class='line'>                    'token': default_token_generator.make_token(user),
</span><span class='line'>                    'protocol': 'http',
</span><span class='line'>                    }
</span><span class='line'>                subject_template_name='registration/password_reset_subject.txt'
</span><span class='line'>                email_template_name='registration/password_reset_email.html'
</span><span class='line'>                subject = loader.render_to_string(subject_template_name, c)
</span><span class='line'>                # Email subject *must not* contain newlines
</span><span class='line'>                subject = ''.join(subject.splitlines())
</span><span class='line'>                email = loader.render_to_string(email_template_name, c)
</span><span class='line'>                send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)
</span><span class='line'>            result = self.form_valid(form)
</span><span class='line'>            messages.success(request, 'Email has been sent to ' + data +"'s email address. Please check its inbox to continue reseting password.")
</span><span class='line'>            return result
</span><span class='line'>        result = self.form_invalid(form)
</span><span class='line'>        messages.error(request, 'This username does not exist in the system.')
</span><span class='line'>        return result
</span><span class='line'>    messages.error(request, 'Invalid Input')
</span><span class='line'>    return self.form_invalid(form)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you see above, the code is fairly simple(although it looks long). An encoded user id has been generated here using <code>urlsafe_base64_encode(force_bytes(user.pk))</code> and a token by using <code>default_token_generator.make_token(user)</code>. This user id is going to be used later to get the user, the token will be used for checking validity of the url for that user and both the token and the user id is going to be used as unique reference for reset password url. <code>c</code> is a dictionary which has user id, token and other related data etc. This dictionary is going to be blent with the template &lsquo;registration/password_reset_email.html&rsquo; and sent to the user&rsquo;s email address.</p>

<p>For displaying messages(if you are using messages framework of django-1.7, details: <a href='https://docs.djangoproject.com/en/dev/ref/contrib/messages/#displaying-messages'>source</a>), add this piece of code in your template:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{# test template #}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!-- code for displaying success or error message in template -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>{% if messages %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul class="messages">
</span><span class='line'>    {% for message in messages %}
</span><span class='line'>    &lt;li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}&lt;/li>
</span><span class='line'>    {% endfor %}
</span><span class='line'>&lt;/ul>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;!-- Form rendering code for template -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form action="" method="post">&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{% csrf_token %}
</span><span class='line'>{{ form.as_p }}
</span><span class='line'>
</span><span class='line'>&lt;input type="submit" value="Submit" /&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form>
</span><span class='line'>{% endif %}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Two more things before wrapping up sending email part. One, making a <b>url</b> for using this view.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns = patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                   # url(r'^account/reset_password_confirm/(?P&lt;uidb64&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'), 
</span><span class='line'>                   # PS: url above is going to used for next section of implementation.
</span><span class='line'>                   url(r'^account/reset_password', ResetPasswordRequestView.as_view(), name="reset_password"),  
</span><span class='line'>                   )
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Two, editing the template of <code>registration/password_reset_email.html</code> or else you will get errors.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% load i18n %}{% autoescape off %}
</span><span class='line'>{% blocktrans %}You&rsquo;re receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% trans &ldquo;Please go to the following page and choose a new password:&rdquo; %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{% block reset_link %}
</span><span class='line'>    {{ domain }}{% url 'reset_password_confirm' uidb64=uid token=token %} 
</span><span class='line'>    &lt;!--This is the only change from ` django/contrib/admin/templates/registration/password_reset_subject.html`. the url name is commented out in urls.py section. The view associated with the url is going to described later in this post. --&gt;
</span><span class='line'>{% endblock %}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>{% trans &ldquo;Your username, in case you&rsquo;ve forgotten:&rdquo; %} {{ user.get_username }}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% trans &ldquo;Thanks for using our site!&rdquo; %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% blocktrans %}The {{ site_name }} team{% endblocktrans %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% endautoescape %}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now run the server and you will see forms like the screen shots below: (This screenshots look cool because bootstrap theme has been used here.)
(**Image sequence is according the implementation flow)</p>

<p></br>(Rendered template for login)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/three.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/three.png</a>" width="600" height="400" title="&lsquo;Rendered template for login&rsquo;" ></p>

<p></br>(Rendered template from PasswordResetRequestForm form)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/five.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/five.png</a>" width="600" height="400" title="&lsquo;Rendered template from PasswordResetRequestForm form&rsquo;" ></p>

<p></br>(Rendered template from PasswordResetRequestForm form with error messages)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/one.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/one.png</a>" width="600" height="400" title="&lsquo;Rendered template from PasswordResetRequestForm form with error messages&rsquo;" ></p>

<p></br>(Rendered template from PasswordResetRequestForm form with error messages)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/two.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/two.png</a>" width="600" height="400" title="&lsquo;Rendered template from PasswordResetRequestForm form with error messages&rsquo;" ></p>

<p></br>(Rendered template of login form with sent email confirmation message)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/four.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/four.png</a>" width="600" height="400" title="&lsquo;Rendered template of login form with sent email confirmation message&rsquo;" ></p>

<p></br>(Sent Email look)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/eight.PNG">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/eight.PNG</a>" width="600" height="400" title="&lsquo;Rendered template of login form with sent email confirmation message&rsquo;" ></p>

<h2>Implemetation of clicking the reset url and entering new password for reset completation.</h2>

<p>First, lets write a <b>form</b> which will have two fields new password and retype password field.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SetPasswordForm(forms.Form):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"""
</span><span class='line'>A form that lets a user change set their password without entering the old
</span><span class='line'>password
</span><span class='line'>"""
</span><span class='line'>error_messages = {
</span><span class='line'>    'password_mismatch': ("The two password fields didn't match."),
</span><span class='line'>    }
</span><span class='line'>new_password1 = forms.CharField(label=("New password"),
</span><span class='line'>                                widget=forms.PasswordInput)
</span><span class='line'>new_password2 = forms.CharField(label=("New password confirmation"),
</span><span class='line'>                                widget=forms.PasswordInput)
</span><span class='line'>
</span><span class='line'>def clean_new_password2(self):
</span><span class='line'>    password1 = self.cleaned_data.get('new_password1')
</span><span class='line'>    password2 = self.cleaned_data.get('new_password2')
</span><span class='line'>    if password1 and password2:
</span><span class='line'>        if password1 != password2:
</span><span class='line'>            raise forms.ValidationError(
</span><span class='line'>                self.error_messages['password_mismatch'],
</span><span class='line'>                code='password_mismatch',
</span><span class='line'>                )
</span><span class='line'>    return password2
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It will take two password input and verify if they match, if those inputs match(in clean method), it will return password. Now using that form, we are going to write a <b>view</b>(reference for implementation:(<a href="https://github.com/django/django/blob/731f313d604a6cc141f36d8a1ba9a75790c70154/django/contrib/auth/views.py#L192">source</a>)).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class PasswordResetConfirmView(FormView):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>template_name = "account/test_template.html"
</span><span class='line'>success_url = '/account/login'
</span><span class='line'>form_class = SetPasswordForm
</span><span class='line'>
</span><span class='line'>def post(self, request, uidb64=None, token=None, *arg, **kwargs):
</span><span class='line'>    """
</span><span class='line'>    View that checks the hash in a password reset link and presents a
</span><span class='line'>    form for entering a new password.
</span><span class='line'>    """
</span><span class='line'>    UserModel = get_user_model()
</span><span class='line'>    form = self.form_class(request.POST)
</span><span class='line'>    assert uidb64 is not None and token is not None  # checked by URLconf
</span><span class='line'>    try:
</span><span class='line'>        uid = urlsafe_base64_decode(uidb64)
</span><span class='line'>        user = UserModel._default_manager.get(pk=uid)
</span><span class='line'>    except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):
</span><span class='line'>        user = None
</span><span class='line'>
</span><span class='line'>    if user is not None and default_token_generator.check_token(user, token):
</span><span class='line'>        if form.is_valid():
</span><span class='line'>            new_password= form.cleaned_data['new_password2']
</span><span class='line'>            user.set_password(new_password)
</span><span class='line'>            user.save()
</span><span class='line'>            messages.success(request, 'Password has been reset.')
</span><span class='line'>            return self.form_valid(form)
</span><span class='line'>        else:
</span><span class='line'>            messages.error(request, 'Password reset has not been unsuccessful.')
</span><span class='line'>            return self.form_invalid(form)
</span><span class='line'>    else:
</span><span class='line'>        messages.error(request,'The reset password link is no longer valid.')
</span><span class='line'>        return self.form_invalid(form)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>URL for this view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns += patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                   url(r'^account/reset_password_confirm/(?P&lt;uidb64&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'),
</span><span class='line'>                   )
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Well <code>PasswordResetConfirmView</code> takes two perameter from urls, uidb64 and token, those were sent within email genereted by <code>ResetPasswordRequestView</code>. We got user id hence the user by decoding uid64 by using urlsafe_base64_decode, and function <code>default_token_generator.check_token</code> checks the token against the user. If they are valid and the form is valid, we set new password for the user using <code>.set_password('password')</code> function. If they are not valid, it will show an error message saying the url is no longer valid.</p>

<p>More screenshots:(sequencial to implementation)</p>

<br/>(Rendered template for SetPasswordForm form)


<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/six.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/six.png</a>" width="600" height="400" title="&lsquo;Rendered template for SetPasswordForm form&rsquo;" ></p>

<br/>(Rendered template for login with success message)


<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/seven.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/seven.png</a>" width="600" height="400"></p>

<p>Thus you implement your very own forgot or reset password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perodic Tasks by Celery 3.1 Example]]></title>
    <link href="http://www.ruddra.com/blog/2014/09/01/perodic-tasks-by-celery-3-dot-1-example/"/>
    <updated>2014-09-01T00:57:41+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/09/01/perodic-tasks-by-celery-3-dot-1-example</id>
    <content type="html"><![CDATA[<h4>Writer is assuming you have read celery docs from here: <a href="http://celery.readthedocs.org/en/latest/index.html">http://celery.readthedocs.org/en/latest/index.html</a><br/></h4>

<p>As we know, celery can be used as a scheduler for executing asynchronous tasks in periodic cycles. Here I am going to share to do that with a code example. But I am going to avoid theoritical knowledge here because you can read them in celery documentation. <!--more--></p>

<p>First install celery: <code>pip install django-celery</code>.</p>

<p>Here is the project structure we are going to use:&ndash;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project
</span><span class='line'>  -settings.py
</span><span class='line'>  -manage.py
</span><span class='line'>  -app1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>-views.py
</span><span class='line'>-models.py
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  -app2&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>-views.py
</span><span class='line'>-models.py
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets say, we want to add periodic task to <code>app1</code>. So structure of the project will be like this:&ndash;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project
</span><span class='line'>  -settings.py
</span><span class='line'>  -manage.py
</span><span class='line'>  -app1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>-__init__py
</span><span class='line'>-celery.py
</span><span class='line'>-tasks.py
</span><span class='line'>-views.py
</span><span class='line'>-models.py
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  -app2&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>-views.py
</span><span class='line'>-models.py
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>No need to panic to see two new .py files. They will be created in time. :)</p>

<p>Now, we need to add celery configuration in <code>settings.py</code>:&ndash;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from &lt;strong>future&lt;/strong> import absolute_import
</span><span class='line'>BROKER_URL = &lsquo;pyamqp://guest:guest@wlocalhost:5672//&rsquo; #read docs
</span><span class='line'>CELERY_IMPORTS = (&lsquo;app1.tasks&rsquo;, )
</span><span class='line'>from celery.schedules import crontab
</span><span class='line'>from datetime import timedelta&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>CELERYBEAT_SCHEDULE = {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>'schedule-name': { 
</span><span class='line'>                    'task': 'app1.tasks',  # example: 'files.tasks.cleanup'
</span><span class='line'>                    'schedule': timedelta(seconds=30),
</span><span class='line'>                    },
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>And in installed apps, we need to add <code>djcelery</code> :&ndash;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSTALLED_APPS = (&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> ...
</span><span class='line'>'djcelery'
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we shall add a <code>celery.py</code> file in <code>app1</code> directory:&ndash;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from &lt;strong>future&lt;/strong> import absolute_import
</span><span class='line'>import os
</span><span class='line'>from celery import Celery
</span><span class='line'>import django
</span><span class='line'>from django.conf import settings
</span><span class='line'>os.environ.setdefault(&lsquo;DJANGO_SETTINGS_MODULE&rsquo;, &lsquo;settings&rsquo;)
</span><span class='line'>app = Celery(&lsquo;app1.email_sending_method&rsquo;)
</span><span class='line'>app.config_from_object(&lsquo;django.conf:settings&rsquo;)
</span><span class='line'>app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>app.conf.update(&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',
</span><span class='line'>)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>@app.task(bind=True)
</span><span class='line'>def debug_task(self):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>print('Request: {0!r}'.format(self.request))
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
and update the <code>__init__.py</code> file within the directory:&ndash;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from &lt;strong>future&lt;/strong> import absolute_import
</span><span class='line'>from celery import app as celery_app</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we are going to add a <code>tasks.py</code> which is actually going to be executed while running celery.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from &lt;strong>future&lt;/strong> import absolute_import
</span><span class='line'>import datetime
</span><span class='line'>from celery.task.base import periodic_task
</span><span class='line'>from django.core.mail import send_mail&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@periodic_task(run_every=datetime.timedelta(seconds=30))
</span><span class='line'>def email_sending_method():&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    send_mail('subject', 'body', 'from_me@admin.com' , ['to_me@admin.com'], fail_silently=False) 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add respective credentials/configurations for sending mail, and then run this piece of code in command prompt:&ndash;</p>

<p><code>celery -A app1 worker -B -l info</code></p>

<p>And that should do the trick, we will get mails after every 30 seconds.</p>

<h4>PS: Although there might a keyerror, but it won&rsquo;t occur any problems.</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Formsets]]></title>
    <link href="http://www.ruddra.com/blog/2014/08/06/working-with-formsets/"/>
    <updated>2014-08-06T21:44:37+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/08/06/working-with-formsets</id>
    <content type="html"><![CDATA[<p>As <a href="https://docs.djangoproject.com/en/dev/topics/forms/formsets/">documentation</a> says: <blockquote> A formset is a layer of abstraction to work with multiple forms on the same page. It can be best compared to a data grid</blockquote>.</p>

<p>So here I am going to show a very simple django formset implementation example.<!--more--></p>

<p>Here we are going to use the following model, form, template, view:</p>

<h3>Model:</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>model </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Product(models.Model):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>name = models.CharField(max_length=50)
</span><span class='line'>quantity = models.IntegerField()
</span><span class='line'>price = models.IntegerField()
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>class Distributor(models.Model):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>name = models.CharField(max_length=100)
</span><span class='line'>products= models.ManyToManyField(Product)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These fairly simple models, where product is related to distributor model by a many-to-many relation.</p>

<h3>Form:</h3>


<p>First we declare productform, then using formset factory helps to create multiple instances of product. Then we add this to distributor form like below:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>form </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django import forms
</span><span class='line'>from django.forms.formsets import formset_factory
</span><span class='line'>class ProductForm(forms.Form):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> name = forms.CharField()
</span><span class='line'> quantity = forms.IntegerField()
</span><span class='line'> price = forms.IntegerField()
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>ProductFormset= formset_factory(ProductForm)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class DistributorForm(forms.Form):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>name= forms.CharField()
</span><span class='line'>products= ProductFormset()
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we use this form in template.</p>

<h3>Template:</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>template </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form action="" method="post" class="">
</span><span class='line'>{% csrf_token %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2> Distributors :&lt;/h2>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>{% for field in form %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{{ field.errors }}
</span><span class='line'>{{ field.label_tag }} : {{ field }}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>{% endfor %}
</span><span class='line'>{{ form.products.management_form }}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h3> Product Instance(s)&lt;/h3>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="table-product">
</span><span class='line'>    &lt;thead>
</span><span class='line'>        &lt;tr>
</span><span class='line'>          &lt;th>name&lt;/th>
</span><span class='line'>          &lt;th>quantity&lt;/th>     
</span><span class='line'>          &lt;th>price&lt;/th>
</span><span class='line'>        &lt;/tr>
</span><span class='line'>    &lt;/thead>
</span><span class='line'>    &lt;tbody class="product-instances">
</span><span class='line'>        &lt;tr>
</span><span class='line'>          &lt;td>{{ form.product }}&lt;/td>
</span><span class='line'>          &lt;td>{{ form.product }}&lt;/td>       
</span><span class='line'>          &lt;td>{{ form.product }}&lt;/td>
</span><span class='line'>          &lt;td> &lt;input id="input_add" type="button" name="add" value=" Add More " class="tr_clone_add btn data_input"> &lt;/td>
</span><span class='line'>        &lt;/tr>
</span><span class='line'>    &lt;/tbody>
</span><span class='line'>{% endfor %}
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>        &lt;input type="submit" name="submit" class="button" value="Save"/&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>        var i = 1;
</span><span class='line'>        $("#input_add").click(function() {
</span><span class='line'>            $("tbody tr:first").clone().find(".data_input").each(function() {
</span><span class='line'>                if ($(this).attr('class')== 'tr_clone_add btn data_input'){
</span><span class='line'>                    $(this).attr({
</span><span class='line'>                        'id': function(_, id) { return "remove_button" },
</span><span class='line'>                        'name': function(_, name) { return "name_remove" +i },
</span><span class='line'>                        'value': 'Remove'
</span><span class='line'>                    }).on("click", function(){
</span><span class='line'>                        var a = $(this).parent();
</span><span class='line'>                        var b= a.parent();
</span><span class='line'>                        i=i-1
</span><span class='line'>                        $('#id_form-TOTAL_FORMS').val(i);
</span><span class='line'>                        b.remove();
</span><span class='line'>
</span><span class='line'>                        $('.product-instances tr').each(function(index, value){
</span><span class='line'>                            $(this).find('.data_input').each(function(){
</span><span class='line'>                                $(this).attr({
</span><span class='line'>                                    'id': function (_, id) {
</span><span class='line'>                                        var idData= id;
</span><span class='line'>                                        var splitV= String(idData).split('-');
</span><span class='line'>                                        var fData= splitV[0];
</span><span class='line'>                                        var tData= splitV[2];
</span><span class='line'>                                        return fData+ "-" +index + "-" + tData
</span><span class='line'>                                    },
</span><span class='line'>                                    'name': function (_, name) {
</span><span class='line'>                                        var nameData= name;
</span><span class='line'>                                        var splitV= String(nameData).split('-');
</span><span class='line'>                                        var fData= splitV[0];
</span><span class='line'>                                        var tData= splitV[2];
</span><span class='line'>                                        return fData+ "-" +index + "-" + tData
</span><span class='line'>                                    }
</span><span class='line'>                                });
</span><span class='line'>                            })
</span><span class='line'>                        })
</span><span class='line'>                    })
</span><span class='line'>                }
</span><span class='line'>                else{
</span><span class='line'>                    $(this).attr({
</span><span class='line'>                        'id': function (_, id) {
</span><span class='line'>                            var idData= id;
</span><span class='line'>                            var splitV= String(idData).split('-');
</span><span class='line'>                            var fData= splitV[0];
</span><span class='line'>                            var tData= splitV[2];
</span><span class='line'>                            return fData+ "-" +i + "-" + tData
</span><span class='line'>                        },
</span><span class='line'>                        'name': function (_, name) {
</span><span class='line'>                            var nameData= name;
</span><span class='line'>                            var splitV= String(nameData).split('-');
</span><span class='line'>                            var fData= splitV[0];
</span><span class='line'>                            var tData= splitV[2];
</span><span class='line'>                            return fData+ "-" +i + "-" + tData
</span><span class='line'>                        }
</span><span class='line'>                    });
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>            }).end().appendTo("tbody");
</span><span class='line'>            $('#id_form-TOTAL_FORMS').val(1+i);
</span><span class='line'>            i++;
</span><span class='line'>
</span><span class='line'>        });
</span><span class='line'>    &lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The html part is fairly simple, like using form in template. Then the JS is being used so that multiple instances of product form can be generated like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!-- First row of the table -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;tr>&lt;td>&lt;input type="text" name="form-0-name" id="id_form-0-name" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-0-quantity" id="id_form-0-quantity" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-0-price" id="id_form-0-price" />&lt;/td>
</span><span class='line'>&lt;td> &lt;input id="input_add" type="button" name="add" value=" Add More " class="tr_clone_add btn data_input"> &lt;/td> &lt;/tr>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!-- Second row of the table -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;tr>&lt;td>&lt;input type="text" name="form-1-name" id="id_form-1-name" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-1-quantity" id="id_form-1-quantity" />&lt;/td>
</span><span class='line'>&lt;td>&lt;input type="number" name="form-1-price" id="id_form-1-price" />&lt;/td>
</span><span class='line'>&lt;td> &lt;input id="remove_button" type="button" name="remove_button1" value=" Remove " class="tr_clone_add btn data_input"> &lt;/td> &lt;/tr>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!-- more inline formset are going to rendered here -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>View:</h3>


<p>Here values from the form are being saved to database.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>view </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def post(request):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    form = DistributorForm(request.POST)
</span><span class='line'>    form.product_instances = ProductFormset(request.POST)
</span><span class='line'>    if form.is_valid():
</span><span class='line'>        distributor= Distributor() #model class
</span><span class='line'>        distributor.name= form.cleaned_data('name')
</span><span class='line'>        distributor.save()
</span><span class='line'>        if form.product_instances.cleaned_data is not None:
</span><span class='line'>            for items in form.product_instances.cleaned_data:
</span><span class='line'>                product = Product() #Product model class
</span><span class='line'>                product.name= item['name']
</span><span class='line'>                product.quantity= item['quantity']
</span><span class='line'>                product.price= item['price']
</span><span class='line'>                product.save()
</span><span class='line'>                distributor.products.add(product)
</span><span class='line'>        return redirect('/success')
</span><span class='line'>    return redirect('/failure')
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output should look like this:</p>

<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/formset.JPG">https://dl.dropboxusercontent.com/u/235131545/myblog/formset.JPG</a>"></p>

<p><b>Notes to keep in mind:</b></p>

<p>First, need to be careful about things like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="hidden" name="form-TOTAL_FORMS" value="1" id="id_form-TOTAL_FORMS" />
</span><span class='line'>&lt;input type="hidden" name="form-INITIAL_FORMS" value="0" id="id_form-INITIAL_FORMS" />
</span><span class='line'>&lt;input type="hidden" name="form-MAX_NUM_FORMS" id="id_form-MAX_NUM_FORMS" /></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here <code>form-TOTAL_FORMS</code> &rsquo;s value should be equal to number of rows in table. The code above must exist in order to formset to work.</p>

<p>Second, in views.py, formset form class needs to be called, else cleaned data within the formset can&rsquo;t be found.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>form.product_instances = ProductFormset(request.POST)</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Syncdb vs Migration]]></title>
    <link href="http://www.ruddra.com/blog/2014/07/04/syncdb-vs-migration/"/>
    <updated>2014-07-04T12:49:31+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/07/04/syncdb-vs-migration</id>
    <content type="html"><![CDATA[<p>While surfing through stackoverflow, I find a common question among django users that, database not working properly; fields attribute changed, yet not working etc. <!--more-->Clearly because most of them used syncdb after altering fields. Well, lets make some things clear here about django <code>syncdb</code> and <code>migration</code>.</p>

<h2>What is <code>syncdb</code>?</h2>

<p><code>syncdb</code> is a command which is executed in django shell to create tables for first time for apps which are added to <code>INSTALLED_APPS</code> of settings.py. Need to keep in mind about two key words: &lsquo;First Time&rsquo; and &lsquo;Newly Added Apps&rsquo;. Because <code>syncdb</code> only works on models of those apps for first time to create initial tables in database. So once <code>syncdb</code> is executed, not model field altering, because if anyone does that, it will not work. Its clearly mentioned in <a href="https://docs.djangoproject.com/en/1.6/ref/django-admin/#syncdb">documentation</a>:</p>

<blockquote>syncdb will only create tables for models which have not yet been installed. It will never issue ALTER TABLE statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process.

If you have made changes to a model and wish to alter the database tables to match, use the sql command to display the new SQL structure and compare that to your existing table schema to work out the changes.</blockquote>


<p>So what if you need to change model field? No worries, migration is here to save you.</p>

<h2>What is <code>migration</code>?</h2>

<p>Migration is a process to reconstruct database schema according to altered model fields. From Django 1.7(under development) <a href="https://docs.djangoproject.com/en/dev/topics/migrations/">documentation</a>:</p>

<blockquote>Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They’re designed to be mostly automatic, but you’ll need to know when to make migrations, when to run them, and the common problems you might run into.</blockquote>


<p>So, after using <code>syncdb</code>, if you need to alter model fields, then go ahead, and after that you have to migrate database. If you are using django &lt;=1.6, then you can use <a href="http://south.aeracode.org/">South</a>. If django is above 1.6, it has its own <a href="https://docs.djangoproject.com/en/dev/topics/migrations/">migration</a> process.</p>

<p>And of course, if you use <code>South</code> to migrate, you have to use <code>syncdb</code> before executing migration, because if you don&rsquo;t, initial database tables(including auth, auth_group_permission, django_admin_log etc) will not be created.</p>

<h3>PS: <code>syncdb</code> will be depricated from django 1.7, which will reduce the hassle of using syncdb and migration separately.</h3>
]]></content>
  </entry>
  
</feed>
