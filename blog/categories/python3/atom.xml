<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python3 | Ruddra's Blog]]></title>
  <link href="http://www.ruddra.com/blog/categories/python3/atom.xml" rel="self"/>
  <link href="http://www.ruddra.com/"/>
  <updated>2015-05-06T18:27:39+06:00</updated>
  <id>http://www.ruddra.com/</id>
  <author>
    <name><![CDATA[Arnab Kumar Shil]]></name>
    <email><![CDATA[ruddra90@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy: Dynamically Constructing Filters Based on String Input]]></title>
    <link href="http://www.ruddra.com/blog/2015/05/06/sqlalchemy-dynamic-constructing-filters-based-on-string-input/"/>
    <updated>2015-05-06T15:13:51+06:00</updated>
    <id>http://www.ruddra.com/blog/2015/05/06/sqlalchemy-dynamic-constructing-filters-based-on-string-input</id>
    <content type="html"><![CDATA[<p>Here I am going to write a dynamic filter. This filter is made for python 3. It will take query or model class and filter condtion as input, It will return filtered query based on those filter condition.<!--more--></p>

<p>This is constructed using this SO answer: <a href="http://stackoverflow.com/questions/14845196/dynamically-constructing-filters-in-sqlalchemy.">http://stackoverflow.com/questions/14845196/dynamically-constructing-filters-in-sqlalchemy.</a></p>

<h3>Function:</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class DynamicFilter(ModelHelper):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>def __init__(self, query=None, model_class=None, filter_condition=None):
</span><span class='line'>    super().__init__(*args, **kwargs)
</span><span class='line'>    self.query = query
</span><span class='line'>    self.model_class = model_class
</span><span class='line'>    self.filter_condition = filter_condition
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def get_query(self):
</span><span class='line'>    '''
</span><span class='line'>    Returns query with all the objects
</span><span class='line'>    :return:
</span><span class='line'>    '''
</span><span class='line'>    if not self.query:
</span><span class='line'>        self.query = self.session.query(self.model_class)
</span><span class='line'>    return self.query
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def filter_query(self, query, filter_condition):
</span><span class='line'>    '''
</span><span class='line'>    Return filtered queryset based on condition.
</span><span class='line'>    :param query: takes query
</span><span class='line'>    :param filter_condition: Its a list, ie: [(key,operator,value)]
</span><span class='line'>    operator list:
</span><span class='line'>        eq for ==
</span><span class='line'>        lt for &lt;
</span><span class='line'>        ge for &gt;=
</span><span class='line'>        in for in_
</span><span class='line'>        like for like
</span><span class='line'>        value could be list or a string
</span><span class='line'>    :return: queryset
</span><span class='line'>
</span><span class='line'>    '''
</span><span class='line'>
</span><span class='line'>    if query is None:
</span><span class='line'>        query = self.get_query()
</span><span class='line'>    model_class = self.get_model_class()  # returns the query's Model
</span><span class='line'>    for raw in filter_condition:
</span><span class='line'>        try:
</span><span class='line'>            key, op, value = raw
</span><span class='line'>        except ValueError:
</span><span class='line'>            raise Exception('Invalid filter: %s' % raw)
</span><span class='line'>        column = getattr(model_class, key, None)
</span><span class='line'>        if not column:
</span><span class='line'>            raise Exception('Invalid filter column: %s' % key)
</span><span class='line'>        if op == 'in':
</span><span class='line'>            if isinstance(value, list):
</span><span class='line'>                filt = column.in_(value)
</span><span class='line'>            else:
</span><span class='line'>                filt = column.in_(value.split(','))
</span><span class='line'>        else:
</span><span class='line'>            try:
</span><span class='line'>                attr = list(filter(
</span><span class='line'>                    lambda e: hasattr(column, e % op),
</span><span class='line'>                    ['%s', '%s_', '__%s__']
</span><span class='line'>                ))[0] % op
</span><span class='line'>            except IndexError:
</span><span class='line'>                raise Exception('Invalid filter operator: %s' % op)
</span><span class='line'>            if value == 'null':
</span><span class='line'>                value = None
</span><span class='line'>            filt = getattr(column, attr)(value)
</span><span class='line'>        query = query.filter(filt)
</span><span class='line'>    return query
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def return_query(self):
</span><span class='line'>    return self.filter_query(self.get_query(), self.filter_condition)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Usage:</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>_filter_condition = [(&lsquo;has_attribute&rsquo;, &lsquo;eq&rsquo;, &lsquo;attribute_value&rsquo;)]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>dynamic_filtered_query_class = DynamicFilter(query=None, model_class=models.user.User,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                              filter_condition=_filter_condition,
</span><span class='line'>                              )
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>dynamic_filtered_query = dynamic_filtered_query_class.return_query()</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>How it works:</h3>

<p>This class returns filtered queryset based on condition.</p>

<p><b>model_class</b> is the model class you want to run the filter upon.
<b>filter_condition</b> the conditon you want to implement here. This is based on the following operator list:</p>

<pre><code>    eq for ==
    lt for &lt;
    ge for &gt;=
    in for in_
    like for like
    value could be list or a string
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django: Some Useful Tools/Function]]></title>
    <link href="http://www.ruddra.com/blog/2015/02/17/django-some-useful-tools-slash-function/"/>
    <updated>2015-02-17T15:06:39+06:00</updated>
    <id>http://www.ruddra.com/blog/2015/02/17/django-some-useful-tools-slash-function</id>
    <content type="html"><![CDATA[<p>I am going to share some useful <code>Django</code> tools/functions which are very useful(were for me atleast) to get things done.<!--more--></p>

<h3>Return any model class and its properties</h3>

<p>This method will return any model class if you have the name of the class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>from django.db import models
</span><span class='line'>&lt;strong>author&lt;/strong> = &lsquo;ruddra&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def get_model_description(model_name=None, return_property_list=True):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>for item in models.get_models(include_auto_created=True):
</span><span class='line'>    if item.__name__ == model_name:
</span><span class='line'>        if return_property_list is True:
</span><span class='line'>            return item.get_trigger_properties()
</span><span class='line'>        else:
</span><span class='line'>            return item
</span><span class='line'>return []
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For usage, let us think of an example. Let us think, we have a class name &lsquo;X&rsquo;, we will get the class instance using it like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from usefultools import get_model_descriptor&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>model_x = get_model_descriptor(model_name=&lsquo;X&rsquo;)   #will get class
</span><span class='line'>model_x_objects = get_model_descriptor(model_name=&lsquo;X&rsquo;).objects.all() #will get all the objects of this class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And for its property:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from usefultools import get_model_descriptor&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>model_x = get_model_descriptor(model_name=&lsquo;X&rsquo;, return_property_list=True)   #will get a list of properties like [&lsquo;a_property&rsquo;,&lsquo;b_property&rsquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Distance Calculator</h3>

<p>If you input latitude and longitude of two places, this function will return the distance in between them. Got help from here: <a href="http://code.activestate.com/recipes/576779-calculating-distance-between-two-geographic-points/">http://code.activestate.com/recipes/576779-calculating-distance-between-two-geographic-points/</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>import math&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def distance_calculator(lat1, long1, lat2, long2):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>lat1, long1, lat2, long2 = float(lat1), float(long1), float(lat2), float(long2)
</span><span class='line'>
</span><span class='line'>degrees_to_radians = math.pi/180.0
</span><span class='line'>
</span><span class='line'>phi1 = (90.0 - lat1)*degrees_to_radians
</span><span class='line'>phi2 = (90.0 - lat2)*degrees_to_radians
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>theta1 = long1*degrees_to_radians
</span><span class='line'>theta2 = long2*degrees_to_radians
</span><span class='line'>
</span><span class='line'>cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) +
</span><span class='line'>       math.cos(phi1)*math.cos(phi2))
</span><span class='line'>arc = math.acos( cos )
</span><span class='line'>distance = arc*6378.1
</span><span class='line'>
</span><span class='line'>return distance
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It will return the distance in KM.</p>

<h3>Dynamic Relational Operations</h3>

<p>Suppose we have a sentence like: <code>'5 is greater than 9'</code> and check if its true. We could use <code>eval</code> to dynamically converty string to python but its highly not recommended. So I tried like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def calculate_relational_operation(lhs, rhs, operator):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>get_type = type(lhs).__name__
</span><span class='line'>if get_type == 'str':
</span><span class='line'>    rhs = str(rhs)
</span><span class='line'>elif get_type == 'float':
</span><span class='line'>    rhs = float(rhs)
</span><span class='line'>elif get_type == 'int':
</span><span class='line'>    rhs = int(rhs)
</span><span class='line'>
</span><span class='line'>if operator == "==":
</span><span class='line'>    if lhs == rhs:
</span><span class='line'>        return True
</span><span class='line'>    return False
</span><span class='line'>elif operator == "!=":
</span><span class='line'>    if lhs != rhs:
</span><span class='line'>            return True
</span><span class='line'>    return False
</span><span class='line'>elif operator == "&gt;":
</span><span class='line'>    if lhs &gt; rhs:
</span><span class='line'>            return True
</span><span class='line'>    return False
</span><span class='line'>elif operator == "&lt;":
</span><span class='line'>    if lhs &lt; rhs:
</span><span class='line'>            return True
</span><span class='line'>    return False
</span><span class='line'>elif operator == "&gt;=":
</span><span class='line'>    if lhs &gt;= rhs:
</span><span class='line'>        return True
</span><span class='line'>    return False
</span><span class='line'>elif operator == "&lt;=":
</span><span class='line'>    if lhs == rhs:
</span><span class='line'>            return True
</span><span class='line'>    return False
</span><span class='line'>elif operator == "Is":
</span><span class='line'>    if lhs is rhs:
</span><span class='line'>        return True
</span><span class='line'>    return False
</span><span class='line'>return False
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It will return <code>True</code> or <code>False</code> depending on the statement/input.</p>

<h3>Get Week List</h3>

<p>It will return all the weeks list from last 1 year (extendable).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>from isoweek import Week&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def generate_week():&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>max_week = datetime.datetime.combine(Week.thisweek().thursday(), datetime.time(0,0))
</span><span class='line'>min_week = max_week - datetime.timedelta(days=365)
</span><span class='line'>_weeks = list()
</span><span class='line'>while True:
</span><span class='line'>    _weeks.append('Week'+str(max_week.isocalendar()[1])+ ' ' +str(max_week.isocalendar()[0])))
</span><span class='line'>    max_week -= datetime.timedelta(days=7)
</span><span class='line'>    if max_week &lt;= min_week:
</span><span class='line'>    break
</span><span class='line'>
</span><span class='line'>return _weeks
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h1>Output>> [&lsquo;Week2 2015&rsquo;, &lsquo;Week1 2015&rsquo;, &lsquo;Week52 2014&rsquo; &hellip;.]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Get Month List</h3>

<p>It will return last 12 month&rsquo;s year and month number. Constructed using this SO answer: <a href="http://stackoverflow.com/a/6576603/2696165">http://stackoverflow.com/a/6576603/2696165</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x = 12
</span><span class='line'>now = time.localtime()
</span><span class='line'>print([time.localtime(time.mktime((now.tm_year, now.tm_mon &ndash; n, 1, 0, 0, 0, 0, 0, 0)))[:2] for n in range(x)])&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Output>> [(2015, 2), (2015, 1), (2014, 12), (2014, 11), (2014, 10), (2014, 9), (2014, 8), (2014, 7), (2014, 6), (2014, 5), (2014, 4), (2014, 3)]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>To Be Continued &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementation of 'Forgot/Reset Password' Feature in Django]]></title>
    <link href="http://www.ruddra.com/blog/2014/10/21/make-own-forgot-slash-reset-password-in-django/"/>
    <updated>2014-10-21T14:00:50+06:00</updated>
    <id>http://www.ruddra.com/blog/2014/10/21/make-own-forgot-slash-reset-password-in-django</id>
    <content type="html"><![CDATA[<p>Django has its own implementation for <code>reset/forgot password</code> for its admin site. We are going to use that piece of code as reference to implement simillar feature for a non admin-site authentication page. Although there are tons of good packages which will allow user to use their password reseting system. But if the system isn&rsquo;t too complex and doesn&rsquo;t need such authentication pluggins, then reusing the django&rsquo;s very own implementation can be a good option.<!--more--></p>

<p>Class based view is going to be used instead of method based view(for no particular reason, so using either of them is alright.). And please read the comments of the example codes for better understanding of implementation.</p>

<p>This implementation is going to divided into two parts. First part is sending an email with reset url, and the Second part is clicking the reset url attached in email and entering new password for reset completation.</p>

<p>Before starting anything, lets look at the django&rsquo;s reset/forgot password&rsquo;s implementation in <code>django/contrib/auth/forms.py</code> (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py'>source</a>) and <code>django/contrib/auth/views.py</code> (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/views.py'>source</a>).</p>

<h2>Implemetation of sending an email for forgot password with reset url</h2>

<p>First need to configure smtp/email configuration so the system can send email. Gmail&rsquo;s SMTP service is going to be used here.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EMAIL_USE_TLS = True
</span><span class='line'>DEFAULT_FROM_EMAIL = &lsquo;&lt;a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#x74;&#x65;&#115;&#116;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#116;&#x65;&#x73;&#116;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;&lt;/a>&rsquo;
</span><span class='line'>SERVER_EMAIL = &lsquo;&lt;a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x74;&#101;&#x73;&#116;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x74;&#101;&#x73;&#x74;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;&lt;/a>&rsquo;
</span><span class='line'>EMAIL_HOST = &lsquo;smtp.gmail.com&rsquo;
</span><span class='line'>EMAIL_PORT = 587
</span><span class='line'>EMAIL_HOST_USER = &lsquo;&lt;a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x74;&#x65;&#115;&#x74;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#116;&#x65;&#x73;&#116;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;&lt;/a>&rsquo;
</span><span class='line'>EMAIL_HOST_PASSWORD = &lsquo;test123##&rsquo;
</span><span class='line'>EMAIL_BACKEND = &lsquo;django.core.mail.backends.smtp.EmailBackend&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we are going to make a <b>reset password form</b> where we are going to add an text field which will take either username or email address associated with the corresponding user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django import forms&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class PasswordResetRequestForm(forms.Form):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>email_or_username = forms.CharField(label=("Email Or Username"), max_length=254)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We are going to make a <b>view</b> which will check the input email/username and send an email to user&rsquo;s email address(implementation reference: <a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py#L235'>source</a>).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from django.contrib.auth.tokens import default_token_generator
</span><span class='line'>from django.utils.encoding import force_bytes
</span><span class='line'>from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
</span><span class='line'>from django.template import loader
</span><span class='line'>from django.core.validators import validate_email
</span><span class='line'>from django.core.exceptions import ValidationError
</span><span class='line'>from django.core.mail import send_mail
</span><span class='line'>from settings import DEFAULT_FROM_EMAIL
</span><span class='line'>from django.views.generic import *
</span><span class='line'>from utils.forms.reset_password_form import PasswordResetRequestForm
</span><span class='line'>from django.contrib import messages
</span><span class='line'>from django.contrib.auth.models import User
</span><span class='line'>from django.db.models.query_utils import Q&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class ResetPasswordRequestView(FormView):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>template_name = "account/test_template.html"    #code for template is given below the view's code
</span><span class='line'>success_url = '/account/login'
</span><span class='line'>form_class = PasswordResetRequestForm
</span><span class='line'>
</span><span class='line'>@staticmethod
</span><span class='line'>def validate_email_address(email):
</span><span class='line'>'''
</span><span class='line'>This method here validates the if the input is an email address or not. Its return type is boolean, True if the input is a email address or False if its not.
</span><span class='line'>'''
</span><span class='line'>    try:
</span><span class='line'>        validate_email(email)
</span><span class='line'>        return True
</span><span class='line'>    except ValidationError:
</span><span class='line'>        return False
</span><span class='line'>
</span><span class='line'>def post(self, request, *args, **kwargs):
</span><span class='line'>'''
</span><span class='line'>A normal post request which takes input from field "email_or_username" (in ResetPasswordRequestForm). 
</span><span class='line'>'''
</span><span class='line'>    form = self.form_class(request.POST)
</span><span class='line'>    if form.is_valid():
</span><span class='line'>        data= form.cleaned_data["email_or_username"]
</span><span class='line'>    if self.validate_email_address(data) is True:                 #uses the method written above
</span><span class='line'>        '''
</span><span class='line'>        If the input is an valid email address, then the following code will lookup for users associated with that email address. If found then an email will be sent to the address, else an error message will be printed on the screen.
</span><span class='line'>        '''
</span><span class='line'>        associated_users= User.objects.filter(Q(email=data)|Q(username=data))
</span><span class='line'>        if associated_users.exists():
</span><span class='line'>            for user in associated_users:
</span><span class='line'>                    c = {
</span><span class='line'>                        'email': user.email,
</span><span class='line'>                        'domain': request.META['HTTP_HOST'],
</span><span class='line'>                        'site_name': 'your site',
</span><span class='line'>                        'uid': urlsafe_base64_encode(force_bytes(user.pk)),
</span><span class='line'>                        'user': user,
</span><span class='line'>                        'token': default_token_generator.make_token(user),
</span><span class='line'>                        'protocol': 'http',
</span><span class='line'>                        }
</span><span class='line'>                    subject_template_name='registration/password_reset_subject.txt' 
</span><span class='line'>                    # copied from django/contrib/admin/templates/registration/password_reset_subject.txt to templates directory
</span><span class='line'>                    email_template_name='registration/password_reset_email.html'    
</span><span class='line'>                    # copied from django/contrib/admin/templates/registration/password_reset_email.html to templates directory
</span><span class='line'>                    subject = loader.render_to_string(subject_template_name, c)
</span><span class='line'>                    # Email subject *must not* contain newlines
</span><span class='line'>                    subject = ''.join(subject.splitlines())
</span><span class='line'>                    email = loader.render_to_string(email_template_name, c)
</span><span class='line'>                    send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)
</span><span class='line'>            result = self.form_valid(form)
</span><span class='line'>            messages.success(request, 'An email has been sent to ' + data +". Please check its inbox to continue reseting password.")
</span><span class='line'>            return result
</span><span class='line'>        result = self.form_invalid(form)
</span><span class='line'>        messages.error(request, 'No user is associated with this email address')
</span><span class='line'>        return result
</span><span class='line'>    else:
</span><span class='line'>        '''
</span><span class='line'>        If the input is an username, then the following code will lookup for users associated with that user. If found then an email will be sent to the user's address, else an error message will be printed on the screen.
</span><span class='line'>        '''
</span><span class='line'>        associated_users= User.objects.filter(username=data)
</span><span class='line'>        if associated_users.exists():
</span><span class='line'>            for user in associated_users:
</span><span class='line'>                c = {
</span><span class='line'>                    'email': user.email,
</span><span class='line'>                    'domain': 'example.com', #or your domain
</span><span class='line'>                    'site_name': 'example',
</span><span class='line'>                    'uid': urlsafe_base64_encode(force_bytes(user.pk)),
</span><span class='line'>                    'user': user,
</span><span class='line'>                    'token': default_token_generator.make_token(user),
</span><span class='line'>                    'protocol': 'http',
</span><span class='line'>                    }
</span><span class='line'>                subject_template_name='registration/password_reset_subject.txt'
</span><span class='line'>                email_template_name='registration/password_reset_email.html'
</span><span class='line'>                subject = loader.render_to_string(subject_template_name, c)
</span><span class='line'>                # Email subject *must not* contain newlines
</span><span class='line'>                subject = ''.join(subject.splitlines())
</span><span class='line'>                email = loader.render_to_string(email_template_name, c)
</span><span class='line'>                send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)
</span><span class='line'>            result = self.form_valid(form)
</span><span class='line'>            messages.success(request, 'Email has been sent to ' + data +"'s email address. Please check its inbox to continue reseting password.")
</span><span class='line'>            return result
</span><span class='line'>        result = self.form_invalid(form)
</span><span class='line'>        messages.error(request, 'This username does not exist in the system.')
</span><span class='line'>        return result
</span><span class='line'>    messages.error(request, 'Invalid Input')
</span><span class='line'>    return self.form_invalid(form)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you see above, the code is fairly simple(although it looks long). An encoded user id has been generated here using <code>urlsafe_base64_encode(force_bytes(user.pk))</code> and a token by using <code>default_token_generator.make_token(user)</code>. This user id is going to be used later to get the user, the token will be used for checking validity of the url for that user and both the token and the user id is going to be used as unique reference for reset password url. <code>c</code> is a dictionary which has user id, token and other related data etc. This dictionary is going to be blent with the template &lsquo;registration/password_reset_email.html&rsquo; and sent to the user&rsquo;s email address.</p>

<p>For displaying messages(if you are using messages framework of django-1.7, details: <a href='https://docs.djangoproject.com/en/dev/ref/contrib/messages/#displaying-messages'>source</a>), add this piece of code in your template:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{# test template #}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!-- code for displaying success or error message in template -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>{% if messages %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul class="messages">
</span><span class='line'>    {% for message in messages %}
</span><span class='line'>    &lt;li>{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}&lt;/li>
</span><span class='line'>    {% endfor %}
</span><span class='line'>    {% endif %}
</span><span class='line'>&lt;/ul>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;!-- Form rendering code for template -->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form action="" method="post">&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{% csrf_token %}
</span><span class='line'>{{ form.as_p }}
</span><span class='line'>
</span><span class='line'>&lt;input type="submit" value="Submit" /&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Two more things before wrapping up sending email part. One, making a <b>url</b> for using this view.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns = patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                   url(r'^admin/', include(admin.site.urls)),
</span><span class='line'>                   # url(r'^account/reset_password_confirm/(?P&lt;uidb64&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'), 
</span><span class='line'>                   # PS: url above is going to used for next section of implementation.
</span><span class='line'>                   url(r'^account/reset_password', ResetPasswordRequestView.as_view(), name="reset_password"),  
</span><span class='line'>                   )
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Two, editing the template of <code>registration/password_reset_email.html</code> or else you will get errors.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% load i18n %}{% autoescape off %}
</span><span class='line'>{% blocktrans %}You&rsquo;re receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% trans &ldquo;Please go to the following page and choose a new password:&rdquo; %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{% block reset_link %}
</span><span class='line'>    {{ domain }}{% url 'reset_password_confirm' uidb64=uid token=token %} 
</span><span class='line'>    &lt;!--This is the only change from ` django/contrib/admin/templates/registration/password_reset_subject.html`. the url name is commented out in urls.py section. The view associated with the url is going to described later in this post. --&gt;
</span><span class='line'>{% endblock %}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>{% trans &ldquo;Your username, in case you&rsquo;ve forgotten:&rdquo; %} {{ user.get_username }}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% trans &ldquo;Thanks for using our site!&rdquo; %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% blocktrans %}The {{ site_name }} team{% endblocktrans %}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{% endautoescape %}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now run the server and you will see forms like the screen shots below: (This screenshots look cool because bootstrap theme has been used here.)
(**Image sequence is according the implementation flow)</p>

<p></br>(Rendered template for login)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/three.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/three.png</a>" width="600" height="400" title="&lsquo;Rendered template for login&rsquo;" ></p>

<p></br>(Rendered template from PasswordResetRequestForm form)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/five.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/five.png</a>" width="600" height="400" title="&lsquo;Rendered template from PasswordResetRequestForm form&rsquo;" ></p>

<p></br>(Rendered template from PasswordResetRequestForm form with error messages)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/one.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/one.png</a>" width="600" height="400" title="&lsquo;Rendered template from PasswordResetRequestForm form with error messages&rsquo;" ></p>

<p></br>(Rendered template from PasswordResetRequestForm form with error messages)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/two.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/two.png</a>" width="600" height="400" title="&lsquo;Rendered template from PasswordResetRequestForm form with error messages&rsquo;" ></p>

<p></br>(Rendered template of login form with sent email confirmation message)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/four.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/four.png</a>" width="600" height="400" title="&lsquo;Rendered template of login form with sent email confirmation message&rsquo;" ></p>

<p></br>(Sent Email look)
<img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/eight.PNG">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/eight.PNG</a>" width="600" height="400" title="&lsquo;Rendered template of login form with sent email confirmation message&rsquo;" ></p>

<h2>Implemetation of clicking the reset url and entering new password for reset completation.</h2>

<p>First, lets write a <b>form</b> which will have two fields new password and retype password field.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SetPasswordForm(forms.Form):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"""
</span><span class='line'>A form that lets a user change set their password without entering the old
</span><span class='line'>password
</span><span class='line'>"""
</span><span class='line'>error_messages = {
</span><span class='line'>    'password_mismatch': ("The two password fields didn't match."),
</span><span class='line'>    }
</span><span class='line'>new_password1 = forms.CharField(label=("New password"),
</span><span class='line'>                                widget=forms.PasswordInput)
</span><span class='line'>new_password2 = forms.CharField(label=("New password confirmation"),
</span><span class='line'>                                widget=forms.PasswordInput)
</span><span class='line'>
</span><span class='line'>def clean_new_password2(self):
</span><span class='line'>    password1 = self.cleaned_data.get('new_password1')
</span><span class='line'>    password2 = self.cleaned_data.get('new_password2')
</span><span class='line'>    if password1 and password2:
</span><span class='line'>        if password1 != password2:
</span><span class='line'>            raise forms.ValidationError(
</span><span class='line'>                self.error_messages['password_mismatch'],
</span><span class='line'>                code='password_mismatch',
</span><span class='line'>                )
</span><span class='line'>    return password2
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It will take two password input and verify if they match, if those inputs match(in clean method), it will return password. Now using that form, we are going to write a <b>view</b>(reference for implementation:(<a href="https://github.com/django/django/blob/731f313d604a6cc141f36d8a1ba9a75790c70154/django/contrib/auth/views.py#L192">source</a>)).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class PasswordResetConfirmView(FormView):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>template_name = "account/test_template.html"
</span><span class='line'>success_url = '/admin/'
</span><span class='line'>form_class = SetPasswordForm
</span><span class='line'>
</span><span class='line'>def post(self, request, uidb64=None, token=None, *arg, **kwargs):
</span><span class='line'>    """
</span><span class='line'>    View that checks the hash in a password reset link and presents a
</span><span class='line'>    form for entering a new password.
</span><span class='line'>    """
</span><span class='line'>    UserModel = get_user_model()
</span><span class='line'>    form = self.form_class(request.POST)
</span><span class='line'>    assert uidb64 is not None and token is not None  # checked by URLconf
</span><span class='line'>    try:
</span><span class='line'>        uid = urlsafe_base64_decode(uidb64)
</span><span class='line'>        user = UserModel._default_manager.get(pk=uid)
</span><span class='line'>    except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):
</span><span class='line'>        user = None
</span><span class='line'>
</span><span class='line'>    if user is not None and default_token_generator.check_token(user, token):
</span><span class='line'>        if form.is_valid():
</span><span class='line'>            new_password= form.cleaned_data['new_password2']
</span><span class='line'>            user.set_password(new_password)
</span><span class='line'>            user.save()
</span><span class='line'>            messages.success(request, 'Password has been reset.')
</span><span class='line'>            return self.form_valid(form)
</span><span class='line'>        else:
</span><span class='line'>            messages.error(request, 'Password reset has not been unsuccessful.')
</span><span class='line'>            return self.form_invalid(form)
</span><span class='line'>    else:
</span><span class='line'>        messages.error(request,'The reset password link is no longer valid.')
</span><span class='line'>        return self.form_invalid(form)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>URL for this view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>urlpatterns += patterns(&lsquo;&rsquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                   url(r'^admin/', include(admin.site.urls)),
</span><span class='line'>                   url(r'^account/reset_password_confirm/(?P&lt;uidb64&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'),
</span><span class='line'>                   )
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Well <code>PasswordResetConfirmView</code> takes two perameter from urls, uidb64 and token, those were sent within email genereted by <code>ResetPasswordRequestView</code>. We got user id hence the user by decoding uid64 by using urlsafe_base64_decode, and function <code>default_token_generator.check_token</code> checks the token against the user. If they are valid and the form is valid, we set new password for the user using <code>.set_password('password')</code> function. If they are not valid, it will show an error message saying the url is no longer valid.</p>

<p>More screenshots:(sequencial to implementation)</p>

<br/>(Rendered template for SetPasswordForm form)


<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/six.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/six.png</a>" width="600" height="400" title="&lsquo;Rendered template for SetPasswordForm form&rsquo;" ></p>

<br/>(Rendered template for login with success message)


<p><img class="<a" src="href="https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/seven.png">https://dl.dropboxusercontent.com/u/235131545/myblog/post_forgot_password/seven.png</a>" width="600" height="400"></p>

<p>Thus you implement your very own forgot or reset password.</p>

<h3><b>For full project/implementation, check this <a href="https://github.com/skyrudy/django-reset-password/tree/master">repository</a></b> </h3>

]]></content>
  </entry>
  
</feed>
